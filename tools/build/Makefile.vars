obj-y :=
obj-m :=
bin-y :=
test-y :=
sample-y :=

# builtin objects, deps and configs lookup variables
builtins :=
builtin-cflags :=
builtin-flows :=
builtin-linux-micro :=
builtin-pin-mux :=
builtin-objs :=

# module objects, deps and configs lookup variables
modules :=
modules-out :=
mod-flows :=
mod-linux-micro :=
mod-pin-mux :=
mod-ar :=
mod-so :=

# binary lookup variables
bins :=
bins-out :=

# test suite lookup variables
tests :=
tests-out :=

samples :=
samples-out :=

all-gens :=
all-objs :=
all-dest-hdr :=
all-hdr :=
all-dest-bin :=
all-mod-descs :=
all-cflags :=
all-ldflags :=

module-types := flow linux-micro pin-mux

# vars to distinguish the modules types
flow-dir := $(top_srcdir)src/modules/flow/
linux-micro-dir := $(top_srcdir)src/modules/linux-micro/
pin-mux-dir := $(top_srcdir)src/modules/pin-mux/

# build/debugging
ifeq ($(V),1)
Q :=
else
Q := @
endif

# toolchain setup
TARGET_ARFLAGS ?= rcs
TARGETAR ?= $(TOOLCHAIN_PREFIX)ar
TARGETCC ?= $(TOOLCHAIN_PREFIX)gcc

HOSTCC ?= $(HOST_PREFIX)gcc
HOSTAR ?= $(HOST_PREFIX)ar

INSTALL ?= install
LN ?= ln
SED ?= sed
MKDIR ?= mkdir
CAT ?= cat
RM ?= rm
CP ?= cp
MV ?= mv
CHMOD ?= chmod

HAVE_VALGRIND := $(if $(filter-out $(wildcard $(VALGRIND)),$(VALGRIND)),n,y)
HAVE_DOXYGEN := $(if $(filter-out $(wildcard $(DOXYGEN)),$(DOXYGEN)),n,y)
HAVE_TAR := $(if $(filter-out $(wildcard $(TAR)),$(TAR)),n,y)
HAVE_BZIP2 := $(if $(filter-out $(wildcard $(BZIP2)),$(BZIP2)),n,y)

# installation
PREFIX := $(patsubst "%",%,$(PREFIX))

# build dirs
## BUILDDIR is the user provided option
BUILDDIR ?= $(top_srcdir)build/

top_builddir := $(BUILDDIR)
build_sysroot := $(top_builddir)soletta_sysroot
build_stagedir := $(top_builddir)stage/
build_libdir := $(build_sysroot)$(LIBDIR)
build_modulesdir := $(build_sysroot)$(MODULESDIR)
build_includedir := $(build_sysroot)$(SOL_INCLUDEDIR)
build_pcdir := $(build_sysroot)$(PCDIR)
build_bindir := $(build_sysroot)$(BINDIR)
build_descdir := $(build_sysroot)$(DESCDIR)
build_datadir := $(build_sysroot)$(SOL_DATADIR)
build_flowdatadir := $(build_sysroot)$(SOL_FLOW_DATADIR)
build_gdbautoload := $(build_sysroot)$(DATADIR)gdb/auto-load/

SOLETTA_INSTALL_ROOT := $(build_sysroot)
export SOLETTA_INSTALL_ROOT

#src dirs
coveragedir = $(top_srcdir)coverage/
src_modulesdir := $(top_srcdir)src/modules/
SCRIPTDIR := $(top_srcdir)data/scripts/

# sub-modules and deps
SUBDIRS := $(addprefix $(top_srcdir)src/lib/,common comms datatypes flow) $(top_srcdir)src/shared
SUBDIRS := $(dir $(filter-out $(SUBDIRS),$(shell find $(top_srcdir)src/ -name 'Makefile')))

MAKEFILE_GEN := $(top_srcdir)Makefile.gen
KCONFIG_GEN := $(top_srcdir)Kconfig.gen

DEPENDENCY_SPEC := $(top_srcdir)data/jsons/dependencies.json
DEPENDENCY_CACHE := $(top_srcdir).config-cache
DEPENDENCY_FILES := $(MAKEFILE_GEN) $(KCONFIG_GEN)
DEPENDENCY_SCRIPT := $(SCRIPTDIR)dependency-resolver.py
HAVE_DEPENDENCY_FILES := $(if $(filter-out $(wildcard $(DEPENDENCY_FILES)),$(DEPENDENCY_FILES)),n,y)
BSDIR := $(top_srcdir)tools/build/

BSDEPS := Makefile Kconfig
BSDEPS += $(addprefix $(BSDIR),Makefile.kconfig Makefile.vars Makefile.rules)

TEMPLATE_SCRIPT := $(SCRIPTDIR)template.py

# flags and comp. helpers
HEADERDIRS := $(addprefix $(top_srcdir),src/shared src/lib/common)
HEADERDIRS += $(addprefix $(top_srcdir),src/lib/flow src/lib/comms/)
HEADERDIRS += $(addprefix $(top_srcdir),$(KCONFIG_INCLUDE)generated/)
HEADERDIRS += $(build_includedir)

LIB_OUTPUTDIR := $(build_libdir)

SOL_LIB_AR := $(LIB_OUTPUTDIR)libsoletta.a
SOL_LIB_SO := $(LIB_OUTPUTDIR)libsoletta.so

GDB_AUTOLOAD_PY_DEST := $(build_gdbautoload)libsoletta.so.$(VERSION)-gdb.py
GDB_AUTOLOAD_PY := $(top_srcdir)data/gdb/libsoletta.so-gdb.py

COMMON_CFLAGS += $(CFLAGS)

ifeq (y,$(LOG))
ifeq (y,$(MAXIMUM_LOG_LEVEL_CRITICAL))
MAXIMUM_LOG_LEVEL := 0
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_ERROR))
MAXIMUM_LOG_LEVEL := 1
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_WARNING))
MAXIMUM_LOG_LEVEL := 2
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_INFO))
MAXIMUM_LOG_LEVEL := 3
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_DEBUG))
MAXIMUM_LOG_LEVEL := 4
endif

ifneq (y,$(MAXIMUM_LOG_LEVEL_UNLIMITED))
COMMON_CFLAGS += -DSOL_LOG_LEVEL_MAXIMUM=$(MAXIMUM_LOG_LEVEL)
endif

endif #LOG

ifeq (,$(PLATFORM_NAME))
ifeq (y,$(SOL_PLATFORM_LINUX))
PLATFORM_NAME = linux
endif
ifeq (y,$(PLATFORM_RIOTOS))
PLATFORM_NAME = riotos
endif
endif #!PLATFORM_NAME

ifneq (,$(PLATFORM_NAME))
COMMON_CFLAGS += -DPLATFORM_NAME=\"$(PLATFORM_NAME)\"
endif

ifneq (,$(filter %coverage,$(MAKECMDGOALS)))
COMMON_CFLAGS += -fprofile-arcs -ftest-coverage
COMMON_LDFLAGS += -fprofile-arcs
endif

DEP_RESOLVER_CFLAGS := $(CFLAGS) -Werror=implicit-function-declaration
DEFINITIONS_H := $(top_srcdir)include/generated/sol_definitions.h

COMMON_CFLAGS += -std=gnu99 -fPIC
COMMON_CFLAGS += -include $(abspath $(KCONFIG_AUTOHEADER))
COMMON_CFLAGS += -include $(abspath $(DEFINITIONS_H))
COMMON_CFLAGS += $(addprefix -I,$(HEADERDIRS))

## Reduce .eh_frame size.
COMMON_CFLAGS += -fno-asynchronous-unwind-tables

EXEC_LDFLAGS := $(COMMON_LDFLAGS) -lm
LIB_LDFLAGS := $(COMMON_LDFLAGS) -lm

## make sure we link agains ldl only on linux
ifeq (y,$(SOL_PLATFORM_LINUX))
EXEC_LDFLAGS += -ldl
LIB_LDFLAGS += -ldl
endif

OBJ_CFLAGS := $(COMMON_CFLAGS) $(COVERAGE_CFLAGS)
OBJ_LDFLAGS += $(addprefix -L,$(LIB_OUTPUTDIR))

MOD_CFLAGS := $(COMMON_CFLAGS) $(COVERAGE_CFLAGS)
TEST_CFLAGS := $(COMMON_CFLAGS) $(CHECK_CFLAGS)
TEST_LDFLAGS := $(EXEC_LDFLAGS)

BIN_CFLAGS := $(COMMON_CFLAGS)
BIN_LDFLAGS := $(EXEC_LDFLAGS)
BIN_LDFLAGS += $(addprefix -L,$(LIB_OUTPUTDIR))
BIN_LDFLAGS += -lsoletta
BIN_LDFLAGS += -Wl,-R$(abspath $(build_libdir))

SAMPLE_CFLAGS := $(BIN_CFLAGS)
SAMPLE_LDFLAGS := $(BIN_LDFLAGS)

# generators
## headers
LINUX_MICRO_BUILTINS_H := $(top_srcdir)src/lib/common/sol-platform-linux-micro-builtins-gen.h
FLOW_BUILTINS_H := $(top_srcdir)src/lib/flow/sol-flow-builtins-gen.h
PIN_MUX_BUILTINS_H := $(top_srcdir)src/lib/common/sol-pin-mux-builtins-gen.h

FLOW_BUILDOPTS_H := $(top_srcdir)src/lib/flow/sol-flow-buildopts.h
FLOW_BUILDOPTS_H_IN := $(addsuffix .in,$(FLOW_BUILDOPTS_H))

COMMON_BUILDOPTS_H := $(top_srcdir)src/lib/common/sol-common-buildopts.h
COMMON_BUILDOPTS_H_IN := $(addsuffix .in,$(COMMON_BUILDOPTS_H))

NODE_TYPE_SCHEMA := $(top_srcdir)data/schemas/node-type-genspec.schema
NODE_TYPE_SCHEMA_DEST := $(build_flowdatadir)schemas/node-type-genspec.schema

PLATFORM_DETECT := $(top_srcdir)data/jsons/platform_detect.json
PLATFORM_DETECT_DEST := $(build_datadir)platform_detect.json

FLOW_NODE_TYPE_FIND := $(SCRIPTDIR)sol-flow-node-type-find.py
FLOW_NODE_TYPE_FIND_IN := $(addsuffix .in,$(FLOW_NODE_TYPE_FIND))

FLOW_BUILTINS_DESC := $(build_descdir)builtins.json

FLOW_MERGE_BUILTINS_SCRIPT := $(SCRIPTDIR)flow-merge-builtins.py

JSON_FORMAT_SCRIPT := $(SCRIPTDIR)json-format.py

HEADER_GEN :=

ifeq (y,$(PLATFORM_LINUX_MICRO))
HEADER_GEN += $(LINUX_MICRO_BUILTINS_H)
endif

ifeq (y,$(HAVE_PIN_MUX))
HEADER_GEN += $(PIN_MUX_BUILTINS_H)
endif

HEADER_GEN += $(FLOW_BUILTINS_H)
HEADER_GEN += $(FLOW_BUILDOPTS_H)
HEADER_GEN += $(COMMON_BUILDOPTS_H)

## scripts
BUILTINS_SCRIPT := $(SCRIPTDIR)sol-builtins-gen.py

NODE_TYPE_GEN_SCRIPT := $(SCRIPTDIR)sol-flow-node-type-gen.py
NODE_TYPE_GEN_SCRIPT_IN := $(addsuffix .in,$(SCRIPTDIR)sol-flow-node-type-gen.py)

FLOW_OIC_GEN_SCRIPT := $(top_srcdir)data/oic/oicgen.py
TEST_SUITE_RUN_SCRIPT := $(SCRIPTDIR)suite.py
TEST_VALGRIND_SUPP := $(top_srcdir)src/test/test.supp

TEST_FBP_SCRIPT := $(top_srcdir)tools/run-fbp-tests
SOL_FBP_RUNNER_BIN := $(build_bindir)sol-fbp-runner

DOXYGEN_RESOURCES = \
	doc/doxygen/Doxyfile \
	doc/doxygen/examples.dox \
	$(wildcard doc/doxygen/*.html) \
	$(wildcard doc/doxygen/*.css)

CHEAT_SHEET_RESOURCES = \
	$(wildcard doc/node-types-html/images/*.jpg) \
	$(wildcard doc/node-types-html/js/*.js) \
	$(CHEAT_SHEET_INDEX_HTML_IN) \
	doc/node-types-html/styles.css

CHEAT_SHEET_HTML_SCRIPT := $(SCRIPTDIR)sol-flow-node-type-gen-html.py
CHEAT_SHEET_INDEX_HTML := doc/node-types-html/index.html
CHEAT_SHEET_INDEX_HTML_IN := $(addprefix $(top_srcdir),$(addsuffix .in,$(CHEAT_SHEET_INDEX_HTML)))

DOXYGEN_GENERATED = \
	doc/doxygen/html \
	doc/doxygen/latex \
	doc/doxygen/man

## oic flow
FLOW_OIC_GEN := $(flow-dir)oic/oic.json $(flow-dir)oic/oic.c
FLOW_OIC_SPEC_DIR := $(top_srcdir)data/oic

PC_GEN := $(build_pcdir)soletta.pc
PC_GEN_IN := $(top_srcdir)pc/soletta.pc.in

PRE_GEN := $(HEADER_GEN) $(KCONFIG_AUTOHEADER) $(KCONFIG_CONFIG) $(BSDEPS)
PRE_GEN += $(NODE_TYPE_GEN_SCRIPT)

CLEANUP_GEN := $(FLOW_OIC_GEN) $(HEADER_GEN)

EXTRA_HEADERS := $(COMMON_BUILDOPTS_H) $(FLOW_BUILDOPTS_H)

EXTRA_BINS := $(FLOW_NODE_TYPE_FIND)
EXTRA_BINS += $(addprefix $(SCRIPTDIR),sol-flow-node-type-gen.py sol-flow-node-type-validate.py)

warning-targets = all check check-fbp check-valgrind check-fbp-valgrind coverage run-coverage pre-install post-install install doc cheat-sheet samples: warning

PACKAGE_DOCNAME := "soletta"-$(VERSION)-doc
