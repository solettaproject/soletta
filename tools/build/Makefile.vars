obj-y :=
obj-m :=
data-y :=
data-m :=
bin-y :=
test-y :=
sample-y :=

tests-fbp-bin :=

# builtin objects, deps and configs lookup variables
builtins :=
builtin-cflags :=
builtin-objs :=

# module objects, deps and configs lookup variables
modules :=
modules-out :=
mod-so :=

# binary lookup variables
bins :=
bins-out :=

# test suite lookup variables
tests :=
tests-internal :=
tests-out :=

samples :=
samples-out :=

all-fbp-gens :=
all-gens :=
all-templates :=
all-objs :=
all-dest-hdr :=
all-hdr :=
all-dest-bin :=
all-mod-descs :=
requires-private :=

all-data :=

use-builtin-ldflags =
use-builtin-cflags =

# vars to distinguish the modules types
flow-dir := $(top_srcdir)src/modules/flow/

# build/debugging
ifeq ($(V),1)
Q :=
else
Q := @
endif

# toolchain setup
TARGET_ARFLAGS ?= rcs
TARGETAR ?= $(TOOLCHAIN_PREFIX)ar
TARGETCC ?= $(TOOLCHAIN_PREFIX)$(CC)
PKG_CONFIG ?= pkg-config

HOSTCPP ?= $(HOST_PREFIX)g++
HOSTCC ?= $(HOST_PREFIX)$(CC)
HOSTAR ?= $(HOST_PREFIX)ar

INSTALL ?= install
LN ?= ln
SED ?= sed
MKDIR ?= mkdir
CAT ?= cat
RM ?= rm
CP ?= cp
MV ?= mv
CHMOD ?= chmod
GIT ?= git

LIB_ASAN_PATH =

# installation
PREFIX := $(patsubst "%",%,$(PREFIX))
EXTRA_BINS :=

export PKGNAME := soletta
export VERSION_MAJOR := 0
export VERSION_MINOR := 0
export VERSION_RELEASE := 1
export VERSION := $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_RELEASE)
export DESTDIR ?= /
export SYSCONF ?= /etc/
export LIBDIR ?= $(PREFIX)/lib/
export DATADIR ?= $(PREFIX)/share/
export BINDIR ?= $(PREFIX)/bin/
export INCLUDEDIR ?= $(PREFIX)/include
export SOL_DATADIR := $(DATADIR)/$(PKGNAME)/
export SOL_INCLUDEDIR := $(INCLUDEDIR)/$(PKGNAME)/
export MODULESDIR := $(LIBDIR)$(PKGNAME)/modules/
export PKGDATADIR := $(SOL_DATADIR)
export SOL_FLOW_DATADIR := $(SOL_DATADIR)/flow/
export DESCDIR := $(SOL_FLOW_DATADIR)/descriptions/
export SCHEMADIR := $(SOL_FLOW_DATADIR)/schema/
export PCDIR := $(LIBDIR)/pkgconfig/
export PKGSYSCONFDIR := $(SYSCONF)/$(PKGNAME)/
export FLOWMODULESDIR := $(MODULESDIR)/flow/
export PINMUXDIR := $(MODULESDIR)/pin-mux/
export LINUXMICROMODULESDIR := $(MODULESDIR)/linux-micro/
export FLOWMETATYPEMODULESDIR := $(MODULESDIR)/flow-metatype/
export UPDATEMODULESDIR := $(MODULESDIR)/update/
export FLOWALIASESDIR := $(SOL_FLOW_DATADIR)/aliases/

# _RELATIVE variants replaces $(PREFIX) with `${prefix}', $(LIBDIR) with `${libdir}' and so on, to be used in shell scripts and ".pc" files
export LIBDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(LIBDIR))
export DATADIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(DATADIR))
export BINDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(BINDIR))
export INCLUDEDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(INCLUDEDIR))
export SOL_DATADIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(SOL_DATADIR))
export SOL_INCLUDEDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(SOL_INCLUDEDIR))
export MODULESDIR_RELATIVE := $(subst $(patsubst %/,%,$(LIBDIR)),$${libdir},$(MODULESDIR))
export SOL_FLOW_DATADIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(SOL_FLOW_DATADIR))
export DESCDIR_RELATIVE := $(subst $(patsubst %/,%,$(PKGDATADIR)),$${pkgdatadir},$(DESCDIR))
export SCHEMADIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(SCHEMADIR))
export PCDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(PCDIR))
export PKGSYSCONFDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(PKGSYSCONFDIR))
export FLOWMODULESDIR_RELATIVE := $(subst $(patsubst %/,%,$(MODULESDIR)),$${modulesdir},$(FLOWMODULESDIR))
export PINMUXDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(PINMUXDIR))
export LINUXMICROMODULESDIR_RELATIVE := $(subst $(patsubst %/,%,$(MODULESDIR)),$${modulesdir},$(LINUXMICROMODULESDIR))
export FLOWMETATYPEMODULESDIR_RELATIVE := $(subst $(patsubst %/,%,$(MODULESDIR)),$${modulesdir},$(FLOWMETATYPEMODULESDIR))
export UPDATEMODULESDIR_RELATIVE := $(subst $(patsubst %/,%,$(MODULESDIR)),$${modulesdir},$(UPDATEMODULESDIR))
export FLOWALIASDIR_RELATIVE := $(subst $(patsubst %/,%,$(PREFIX)),$${prefix},$(FLOWALIASDIR))

export FLOWALIASDIR_RELATIVE := $(subst $(patsubst %/,%,$(MODULESDIR)),$${modulesdir},$(FLOWALIASDIR))

# build dirs
## BUILDDIR is the user provided option
BUILDDIR ?= $(top_srcdir)build/

top_builddir := $(BUILDDIR)
build_sysroot := $(top_builddir)soletta_sysroot
build_stagedir := $(top_builddir)stage/
build_libdir := $(build_sysroot)$(LIBDIR)
build_modulesdir := $(build_sysroot)$(MODULESDIR)
build_includedir := $(build_sysroot)$(SOL_INCLUDEDIR)
build_pcdir := $(build_sysroot)$(PCDIR)
build_bindir := $(build_sysroot)$(BINDIR)
build_descdir := $(build_sysroot)$(DESCDIR)
build_datadir := $(build_sysroot)$(SOL_DATADIR)
build_flowdatadir := $(build_sysroot)$(SOL_FLOW_DATADIR)
build_gdbautoload := $(build_sysroot)$(DATADIR)gdb/auto-load/
build_docdir := $(build_stagedir)doc/
build_nodejs_bindingsdir := $(build_libdir)/node_modules/soletta/
build_aliasesdir := $(build_sysroot)$(SOL_FLOW_DATADIR)/aliases/

PACKAGE_DOCNAME := soletta-$(VERSION)-doc
build_doxygendir := $(build_docdir)doxygen/
export build_doxygen_targetdir := $(build_doxygendir)$(PACKAGE_DOCNAME)/
export build_doxygen_logfile := $(build_doxygendir)log.txt

SOLETTA_INSTALL_ROOT := $(build_sysroot)
export SOLETTA_INSTALL_ROOT

#src dirs
coveragedir = $(top_srcdir)coverage/
src_modulesdir := $(top_srcdir)src/modules/
SCRIPTDIR := $(top_srcdir)data/scripts/

# sub-modules and deps
EXCLUDE_SUBDIRS := $(addprefix -not -path ,"$(top_srcdir)src/thirdparty/*")
SUBDIRS := $(dir $(shell find $(top_srcdir)src $(EXCLUDE_SUBDIRS) -name 'Makefile'))

MAKEFILE_GEN := $(top_srcdir)Makefile.gen
KCONFIG_GEN := $(top_srcdir)Kconfig.gen

DEPENDENCY_SPEC := $(top_srcdir)data/jsons/dependencies.json
DEPENDENCY_CACHE := $(top_srcdir).config-cache
DEPENDENCY_FILES := $(MAKEFILE_GEN) $(KCONFIG_GEN)
DEPENDENCY_SCRIPT := $(SCRIPTDIR)dependency-resolver.py
HAVE_DEPENDENCY_FILES := $(if $(filter-out $(wildcard $(DEPENDENCY_FILES)),$(DEPENDENCY_FILES)),n,y)
BSDIR := $(top_srcdir)tools/build/

BSDEPS := Makefile Kconfig
BSDEPS += $(addprefix $(BSDIR),Makefile.kconfig Makefile.vars Makefile.rules)

TEMPLATE_SCRIPT := $(SCRIPTDIR)template.py

# flags and comp. helpers
HEADERDIRS := $(addprefix $(top_srcdir),src/shared src/lib/common)
HEADERDIRS += $(DUKTAPE_SRC_PATH)
HEADERDIRS += $(addprefix $(top_srcdir),src/lib/flow src/lib/comms/)
HEADERDIRS += $(addprefix $(top_srcdir),$(KCONFIG_INCLUDE)generated/)
HEADERDIRS += $(addprefix $(build_stagedir),lib/common lib/flow)
HEADERDIRS += $(build_includedir)
HEADERDIRS += $(addprefix $(build_stagedir),include/)

LIB_OUTPUTDIR := $(build_libdir)

SOL_LIB_AR := $(LIB_OUTPUTDIR)libsoletta.a
SOL_LIB_SO := $(LIB_OUTPUTDIR)libsoletta.so
SOL_SHARED_AR := $(build_stagedir)shared/libsolettashared.a

ifeq (y,$(SHARED_LIBRARY))
SOL_LIB_OUTPUT := $(SOL_LIB_SO)
else
SOL_LIB_OUTPUT := $(SOL_LIB_AR)
endif

GDB_AUTOLOAD_PY_DEST := $(build_gdbautoload)libsoletta.so.$(VERSION)-gdb.py
GDB_AUTOLOAD_PY := $(top_srcdir)data/gdb/libsoletta.so-gdb.py

DEP_RESOLVER_CFLAGS := $(CFLAGS) -std=gnu99 -Werror=implicit-function-declaration
DEP_RESOLVER_LDFLAGS := $(LDFLAGS)

MISSING_H := $(top_srcdir)src/lib/common/sol-missing.h
COMMON_CFLAGS += -include $(abspath $(KCONFIG_AUTOHEADER))
COMMON_CFLAGS += -include $(abspath $(MISSING_H))
COMMON_CFLAGS += $(addprefix -I,$(HEADERDIRS))

ifeq (y,$(LOG))
ifeq (y,$(MAXIMUM_LOG_LEVEL_CRITICAL))
MAXIMUM_LOG_LEVEL := 0
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_ERROR))
MAXIMUM_LOG_LEVEL := 1
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_WARNING))
MAXIMUM_LOG_LEVEL := 2
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_INFO))
MAXIMUM_LOG_LEVEL := 3
endif

ifeq (y,$(MAXIMUM_LOG_LEVEL_DEBUG))
MAXIMUM_LOG_LEVEL := 4
endif

ifneq (y,$(MAXIMUM_LOG_LEVEL_UNLIMITED))
COMMON_CFLAGS += -DSOL_LOG_LEVEL_MAXIMUM=$(MAXIMUM_LOG_LEVEL)
endif

endif #LOG

COMMON_CFLAGS += \
	-DVERSION="\"$(VERSION)\"" \
	-DSYSCONF="\"$(SYSCONF)\"" \
	-DSOL_DATADIR="\"$(SOL_DATADIR)\"" \
	-DMODULESDIR="\"$(MODULESDIR)\"" \
	-DPKGSYSCONFDIR="\"$(PKGSYSCONFDIR)\"" \
	-DFLOWMODULESDIR="\"$(FLOWMODULESDIR)\"" \
	-DPINMUXDIR="\"$(PINMUXDIR)\"" \
	-DLINUXMICROMODULESDIR="\"$(LINUXMICROMODULESDIR)\"" \
	-DFLOWMETATYPEMODULESDIR="\"$(FLOWMETATYPEMODULESDIR)\"" \
	-DUPDATEMODULESDIR="\"$(UPDATEMODULESDIR)\"" \
	-DFLOWALIASESDIR="\"$(FLOWALIASESDIR)\""

ifeq (y,$(CC_SANITIZE))
ifeq (y,$(CC_SANITIZE_UNDEFINED))
ifeq (y,$(SHARED_LIBRARY))
COMMON_CFLAGS += $(DYNAMIC_SANITIZE_UNDEFINED_CFLAGS)
COMMON_LDFLAGS += $(DYNAMIC_SANITIZE_UNDEFINED_LDFLAGS)
else
COMMON_CFLAGS += $(STATIC_SANITIZE_UNDEFINED_CFLAGS)
COMMON_LDFLAGS += $(STATIC_SANITIZE_UNDEFINED_LDFLAGS)
endif
endif
ifeq (y,$(CC_SANITIZE_ADDRESS))
ifeq (y,$(SHARED_LIBRARY))
ASAN_AUX_PATH = $(shell $(HOSTCC) -print-file-name=libasan.so)
LIB_ASAN_PATH = $(shell $(top_srcdir)tools/build/libasan_path.sh $(ASAN_AUX_PATH))
COMMON_CFLAGS += $(DYNAMIC_SANITIZE_ADDRESS_CFLAGS)
COMMON_LDFLAGS += $(DYNAMIC_SANITIZE_ADDRESS_LDFLAGS)
else
COMMON_CFLAGS += $(STATIC_SANITIZE_ADDRESS_CFLAGS)
COMMON_LDFLAGS += $(STATIC_SANITIZE_ADDRESS_LDFLAGS)
endif
endif
else
COMMON_LDFLAGS += $(LDFLAG_UNDEFINED)
endif

ifneq (,$(filter %coverage,$(MAKECMDGOALS)))
COMMON_CFLAGS += -fprofile-arcs -ftest-coverage
COMMON_LDFLAGS += -lgcov
endif

COMMON_CFLAGS += $(CFLAG_FLOAT_STORE)

ifeq (y,$(SHARED_LIBRARY))
COMMON_CFLAGS += -fPIC
endif

ifeq (y,$(BUILD_TYPE_DEBUG))
COMMON_CFLAGS += -g
endif

ifeq (y,$(BUILD_TYPE_RELEASE))
COMMON_CFLAGS += $(RELEASE_COMMON_CFLAGS)
COMMON_CFLAGS += $(FLTO_CFLAGS)
endif

UNQUOTED_CONFIG_CFLAGS := $(shell echo $(CONFIG_CFLAGS))
UNQUOTED_CONFIG_LDFLAGS := $(shell echo $(CONFIG_LDFLAGS))

COMMON_CFLAGS += $(UNQUOTED_CONFIG_CFLAGS)
COMMON_LDFLAGS += $(UNQUOTED_CONFIG_LDFLAGS)

COMMON_CFLAGS += -std=gnu99

LIB_SOLETTA_SHARED_LD_FLAGS := -L$(build_stagedir)shared/ -lsolettashared

EXEC_LDFLAGS := $(COMMON_LDFLAGS)
LIB_LDFLAGS := $(COMMON_LDFLAGS) $(LIB_SOLETTA_SHARED_LD_FLAGS)

ifneq ($(LDFLAG_SONAME),)
LIB_LDFLAGS += -Wl,-soname,$(notdir $(SOL_LIB_SO).$(VERSION_MAJOR))
endif

FIND_LIBRARY_LDFLAGS := $(addprefix -L,$(abspath $(LIB_OUTPUTDIR)))
FIND_LIBRARY_LDFLAGS += -lsoletta

ifeq (y,$(RPATH))
FIND_LIBRARY_LDFLAGS += -Wl,-R$(abspath $(build_libdir))
else
# make sure we set lib path so internal scripts keep working
export LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(abspath $(build_libdir))
endif

LINKED_OBJS_LDFLAGS := $(FIND_LIBRARY_LDFLAGS) $(COMMON_LDFLAGS) $(LIB_SOLETTA_SHARED_LD_FLAGS)

OBJ_CFLAGS := $(COMMON_CFLAGS) $(COVERAGE_CFLAGS)

MOD_CFLAGS := $(COMMON_CFLAGS) $(COVERAGE_CFLAGS)

TEST_CFLAGS := $(COMMON_CFLAGS) $(CHECK_CFLAGS)
TEST_LDFLAGS := $(EXEC_LDFLAGS) $(LINKED_OBJS_LDFLAGS) $(LIB_SOLETTA_SHARED_LD_FLAGS)

BIN_CFLAGS := $(COMMON_CFLAGS) $(BIN_COMMON_CFLAGS) -fPIC
BIN_LDFLAGS := $(EXEC_LDFLAGS) $(LINKED_OBJS_LDFLAGS) $(BIN_COMMON_LDFLAGS)

SAMPLE_CFLAGS := $(BIN_CFLAGS)
SAMPLE_LDFLAGS := $(BIN_LDFLAGS)

# generators
add-template = \
	$(eval all-templates += $(1)) \
	$(eval $(1)-dest := $(2)) \

## cpp
CPP_GEN :=

HEADERS_CC_IN := $(top_srcdir)src/test-cpp/headers.cc.in
HEADERS_CC := $(build_stagedir)bin/cpp/headers.cc

$(call add-template,$(HEADERS_CC_IN),$(HEADERS_CC))

CPP_GEN += $(HEADERS_CC)

## headers
LINUX_MICRO_BUILTINS_H_IN := $(top_srcdir)src/lib/common/sol-platform-linux-micro-builtins-gen.h.in
LINUX_MICRO_BUILTINS_H := $(build_stagedir)lib/common/sol-platform-linux-micro-builtins-gen.h

FLOW_BUILTINS_H_IN := $(top_srcdir)src/lib/flow/sol-flow-builtins-gen.h.in
FLOW_BUILTINS_H := $(build_stagedir)lib/flow/sol-flow-builtins-gen.h

$(call add-template,$(FLOW_BUILTINS_H_IN),$(FLOW_BUILTINS_H))

PIN_MUX_BUILTINS_H_IN := $(top_srcdir)src/lib/common/sol-pin-mux-builtins-gen.h.in
PIN_MUX_BUILTINS_H := $(build_stagedir)lib/common/sol-pin-mux-builtins-gen.h

UPDATE_BUILTINS_H_IN := $(top_srcdir)src/lib/common/sol-update-builtins-gen.h.in
UPDATE_BUILTINS_H := $(build_stagedir)lib/common/sol-update-builtins-gen.h

FLOW_METATYPE_BUILTINS_H_IN := $(top_srcdir)src/lib/flow/sol-flow-metatype-builtins-gen.h.in
FLOW_METATYPE_BUILTINS_H := $(build_stagedir)lib/flow/sol-flow-metatype-builtins-gen.h

$(call add-template,$(FLOW_METATYPE_BUILTINS_H_IN),$(FLOW_METATYPE_BUILTINS_H))

NODE_TYPE_SCHEMA := $(top_srcdir)data/schemas/node-type-genspec.schema
NODE_TYPE_SCHEMA_DEST := $(build_flowdatadir)schemas/node-type-genspec.schema

BOARD_DETECT := $(top_srcdir)data/jsons/50-default.json
BOARD_DETECT_DEST := $(build_datadir)boards/50-default.json

FLOW_NODE_TYPE_FIND := $(build_bindir)sol-flow-node-type-find.py
FLOW_NODE_TYPE_FIND_IN := $(SCRIPTDIR)sol-flow-node-type-find.py.in

$(call add-template,$(FLOW_NODE_TYPE_FIND_IN),$(FLOW_NODE_TYPE_FIND))

FLOW_NODE_TYPE_ALIAS := $(build_bindir)sol-flow-node-type-aliases-gen.py
FLOW_NODE_TYPE_ALIAS_IN := $(SCRIPTDIR)sol-flow-node-type-aliases-gen.py.in

$(call add-template,$(FLOW_NODE_TYPE_ALIAS_IN),$(FLOW_NODE_TYPE_ALIAS))

JSON_FORMAT_SCRIPT := $(SCRIPTDIR)json-format.py

HEADER_GEN :=
PRE_GEN :=

ifeq (y,$(USE_FLOW))
PRE_GEN += $(FLOW_NODE_TYPE_ALIAS) gen-aliases
endif

ifeq (y,$(PLATFORM_LINUX_MICRO))
HEADER_GEN += $(LINUX_MICRO_BUILTINS_H)

$(call add-template,$(LINUX_MICRO_BUILTINS_H_IN),$(LINUX_MICRO_BUILTINS_H))

INITIAL_SERVICES := $(build_modulesdir)linux-micro/initial-services
INITIAL_SERVICES_IN := $(top_srcdir)data/linux-micro/initial-services.in

$(call add-template,$(INITIAL_SERVICES_IN),$(INITIAL_SERVICES))
PRE_GEN += $(INITIAL_SERVICES)

endif

ifeq (y,$(USE_PIN_MUX))
HEADER_GEN += $(PIN_MUX_BUILTINS_H)

$(call add-template,$(PIN_MUX_BUILTINS_H_IN),$(PIN_MUX_BUILTINS_H))
endif

ifeq (y,$(USE_UPDATE))
HEADER_GEN += $(UPDATE_BUILTINS_H)

$(call add-template,$(UPDATE_BUILTINS_H_IN),$(UPDATE_BUILTINS_H))
endif

HEADER_GEN += $(FLOW_BUILTINS_H)
HEADER_GEN += $(FLOW_METATYPE_BUILTINS_H)

## scripts
NODE_TYPE_GEN_SCRIPT := $(build_bindir)sol-flow-node-type-gen.py
NODE_TYPE_GEN_SCRIPT_IN := $(SCRIPTDIR)sol-flow-node-type-gen.py.in

$(call add-template,$(NODE_TYPE_GEN_SCRIPT_IN),$(NODE_TYPE_GEN_SCRIPT))

NODE_TYPE_STUB_GEN_SCRIPT := $(SCRIPTDIR)sol-flow-node-type-stub-gen.py
NODE_TYPE_STUB_GEN_TEST := $(top_srcdir)src/test-stub-gen/dummy.json
NODE_TYPE_STUB_GEN_DIR := $(build_stagedir)dummy/

FLOW_OIC_GEN_SCRIPT += $(addprefix $(SCRIPTDIR),sol-oic-gen.py)
EXTRA_BINS += $(FLOW_OIC_GEN_SCRIPT)

TEST_SUITE_RUN_SCRIPT := $(SCRIPTDIR)suite.py
TEST_VALGRIND_SUPP := $(top_srcdir)src/test/test.supp

TEST_FBP_SCRIPT := $(top_srcdir)tools/run-fbp-tests
SOL_FBP_RUNNER_BIN := $(build_bindir)sol-fbp-runner
SOL_FBP_GENERATOR_BIN := $(build_bindir)sol-fbp-generator
SAMPLES_DEPS_SCRIPT_BLACK_LIST := $(top_srcdir)data/jsons/samples_dependency_check_skip_list.json
TEST_SAMPLES_DEPS_SCRIPT := $(SCRIPTDIR)check-samples-dependencies.py

DOXYGEN_RESOURCES := \
	$(wildcard $(top_srcdir)doc/doxygen/*) \

CHEAT_SHEET_RESOURCES = \
	$(wildcard doc/node-types-html/images/*.jpg) \
	$(wildcard doc/node-types-html/js/*.js) \
	$(wildcard doc/node-types-html/css/*.css) \
	$(CHEAT_SHEET_INDEX_HTML_IN)

CHEAT_SHEET_HTML_SCRIPT := $(SCRIPTDIR)sol-flow-node-type-gen-html.py
CHEAT_SHEET_INDEX_HTML := $(build_docdir)node-types-html/index.html
CHEAT_SHEET_INDEX_HTML_IN := $(top_srcdir)doc/node-types-html/index.html.in

GEN_SVG_SCRIPT := $(top_srcdir)tools/generate-svg-from-all-fbps
SOL_FBP_TO_DOT_BIN := $(build_bindir)sol-fbp-to-dot
SVG_OUTPUT_DIR := $(build_docdir)node-types-html/svg

DOXYGEN_GENERATED := \
	$(build_doxygen_targetdir)html/index.html \
	$(build_doxygen_targetdir)latex/index.tex \
	$(build_doxygen_targetdir)man/man3/index.3

PC_GEN := $(build_pcdir)soletta.pc
PC_GEN_IN := $(top_srcdir)pc/soletta.pc.in

$(call add-template,$(PC_GEN_IN),$(PC_GEN))

PRE_GEN += $(HEADER_GEN) $(KCONFIG_AUTOHEADER) $(KCONFIG_CONFIG) $(BSDEPS) $(CPP_GEN)
PRE_GEN += $(NODE_TYPE_GEN_SCRIPT) $(PC_GEN)

EXTRA_BINS += $(addprefix $(SCRIPTDIR),sol-flow-node-type-validate.py)

warning-targets = all check check-fbp check-valgrind check-fbp-valgrind check-stub coverage run-coverage \
		pre-install post-install install doc cheat-sheet samples doxygen: warning

kconfig-targets := config nconfig menuconfig xconfig gconfig oldconfig localmodconfig localyesconfig \
		silentoldconfig defconfig savedefconfig allnoconfig allyesconfig allmodconfig alldefconfig \
		randconfig listnewconfig olddefconfig kvmconfig tinyconfig help

dep-avoid-targets := $(kconfig-targets) $(warning-targets) clean distclean

ifneq (,$(filter check-fbp-bin,$(MAKECMDGOALS)))
tests-fbp-bin := $(shell $(TEST_FBP_SCRIPT) --query-only --skip SKIP_SIMPLE SKIP_VALGRIND SKIP_COMPILE SKIP_JAVASCRIPT)
endif

ifneq (,$(FLOW_METATYPE_JAVASCRIPT))
tests-fbp-bin += $(top_srcdir)src/test-fbp/javascript.fbp
$(top_srcdir)src/test-fbp/javascript.fbp-extra := $(top_srcdir)src/thirdparty/duktape/src/duktape.c
$(top_srcdir)src/test-fbp/javascript.fbp-CFLAGS := -I$(top_srcdir)src/thirdparty/duktape/src/ -Wno-float-equal \
                                                -Wno-format-nonliteral -Wno-suggest-attribute=noreturn
$(top_srcdir)src/test-fbp/javascript.fbp-LDFLAGS := -lm
else
TEST_FBP_SCRIPT_SKIP_EXTRA := SKIP_JAVASCRIPT
endif

ifneq ($(USE_NODEJS),)
NODEJS_ROOT := $(top_srcdir)/bindings/nodejs
endif

OIC_DATA_MODELS := $(top_srcdir)src/thirdparty/oic-data-models
