check: $(SOL_LIB_SO) $(SOL_LIB_AR) $(tests-out)
	$(Q)$(PYTHON) $(TEST_SUITE_RUN_SCRIPT) --tests="$(tests-out)"

PHONY += check

check-fbp: $(SOL_LIB_SO) $(SOL_LIB_AR) $(bins-out) $(modules-out)
	$(Q)$(PYTHON) $(TEST_FBP_SCRIPT) --runner="$(abspath $(SOL_FBP_RUNNER_BIN))"

PHONY += check-fbp

ifeq (y,$(HAVE_VALGRIND))
check-valgrind: $(SOL_LIB_SO) $(SOL_LIB_AR) $(tests-out)
	$(Q)$(PYTHON) $(TEST_SUITE_RUN_SCRIPT) --tests="$(tests-out)" \
		--valgrind=$(VALGRIND) --valgrind-supp=$(abspath $(TEST_VALGRIND_SUPP))

check-fbp-valgrind: $(SOL_LIB_SO) $(SOL_LIB_AR) $(bins-out) $(modules-out)
	$(Q)$(PYTHON) $(TEST_FBP_SCRIPT) --runner="$(abspath $(SOL_FBP_RUNNER_BIN))" --valgrind="$(VALGRIND)" --valgrind-supp="$(abspath $(TEST_VALGRIND_SUPP))"
else
check-valgrind:
	$(Q)echo "No such valgrind installation: $(VALGRIND), either make sure your valgrind"
	$(Q)echo " installation is correct or provide a valid VALGRIND= variable"
	$(Q)echo "If you've just installed it, run: make reconf"

check-fbp-valgrind: check-valgrind
endif # HAVE_VALGRIND

PHONY += check-valgrind check-fbp-valgrind

ifneq (,$(LCOV))
run-coverage: check check-fbp
	$(Q)$(MKDIR) -p $(coveragedir)
	$(Q)$(LCOV) --capture --directory $(top_srcdir) --output-file $(coveragedir)coverage.info
	$(Q)$(LCOV) --remove $(coveragedir)coverage.info *thirdparty* --output-file $(coveragedir)coverage.info
	$(Q)$(MV) *.gcda $(build_bindir)
	$(Q)$(GENHTML) coverage/coverage.info --output-directory coverage/

coverage: clean
	$(Q)$(RM) -Rf $(coveragedir)
	$(Q)$(MAKE) -f $(top_srcdir)Makefile run-coverage
else
coverage:
	$(Q)echo "No such lcov installation, check your system and run it again."
	$(Q)echo "If you've just installed it, run: make reconf"
endif

PHONY += run-coverage coverage

samples: $(SOL_LIB_SO) $(SOL_LIB_AR) $(samples-out)

PHONY += samples

PRE_INSTALL := $(PC_GEN) $(SOL_LIB_SO) $(SOL_LIB_AR) $(bins-out) $(modules-out) $(all-mod-descs)
PRE_INSTALL += $(NODE_TYPE_SCHEMA_DEST) $(PLATFORM_DETECT_DEST) $(GDB_AUTOLOAD_PY_DEST)

ifneq (,$(strip $(builtin-flows)))
PRE_GEN += $(FLOW_BUILTINS_DESC)
endif

rpath-bins := $(subst $(build_sysroot)/,$(DESTDIR),$(bins-out))

rpath-bins-prepare = \
	$(foreach bin,$(bins-out), \
		$(eval $(bin)-install := $(subst $(build_sysroot)/,$(DESTDIR)/,$(bin))) \
		$(eval all-rpath-bins += $($(bin)-install)-rpath-cleanup) \
	) \

$(eval $(call rpath-bins-prepare))

define rpath-cleanup
$($(1)-install)-rpath-cleanup: $(1) pre-install
	@$(CHRPATH) -d $($(1)-install)
endef
$(foreach bin,$(bins-out),$(eval $(call rpath-cleanup,$(bin))))

pre-install: $(PRE_INSTALL)
	$(Q)echo "     "INSTALLING SYSROOT TO: $(DESTDIR)
	$(Q)$(MKDIR) -p $(DESTDIR)
	$(Q)$(CP) -R $(build_sysroot)/$(PREFIX)/ $(DESTDIR)/$(PREFIX)

post-install: pre-install $(all-rpath-bins)

install: post-install

PHONY += install post-install pre-install

ifeq (yyy,$(HAVE_DOXYGEN)$(HAVE_BZIP2)$(HAVE_TAR))
doxygen: $(DOXYGEN_RESOURCES)
	$(Q)$(RM) -rf $(DOXYGEN_GENERATED)
	$(Q)$(DOXYGEN) doc/doxygen/Doxyfile
	$(Q)$(RM) -rf $(PACKAGE_DOCNAME).tar*
	$(Q)$(MKDIR) -p $(PACKAGE_DOCNAME)/doc
	$(Q)$(CP) -R $(DOXYGEN_GENERATED) $(PACKAGE_DOCNAME)/doc
	$(Q)$(TAR) cf $(PACKAGE_DOCNAME).tar $(PACKAGE_DOCNAME)/
	$(Q)$(BZIP2) -9 $(PACKAGE_DOCNAME).tar
	$(Q)$(RM) -rf $(PACKAGE_DOCNAME)/
	$(Q)$(MKDIR) -p $(top_builddir)
	$(Q)$(MV) $(PACKAGE_DOCNAME).tar.bz2 $(top_builddir)
else
doxygen:
	$(Q)echo "     ERROR: Make sure to have bzip2, tar and doxygen installed and reconfigure"
endif

PHONY += doxygen

doc: cheat-sheet doxygen

PHONY += doc

ifeq (yyy,$(FBP_TO_DOT)$(HAVE_GRAPHVIZ)$(HAVE_IMAGEMAGICK))
cheat-sheet: $(MAKEFILE_GEN) $(CHEAT_SHEET_HTML_SCRIPT) $(CHEAT_SHEET_RESOURCES) $(SOL_FBP_TO_DOT_BIN) $(all-mod-descs)
	$(Q)echo "     "GEN"   "$(CHEAT_SHEET_INDEX_HTML)
	$(Q)$(GEN_SVG_SCRIPT) "$(abspath $(SOL_FBP_TO_DOT_BIN))" $(SVG_OUTPUT_DIR)
	$(Q)$(CHEAT_SHEET_HTML_SCRIPT) $(CHEAT_SHEET_INDEX_HTML_IN) $(CHEAT_SHEET_INDEX_HTML) $(SVG_OUTPUT_DIR) $(all-mod-descs)
else
cheat-sheet:
	$(Q)echo "     Either no sol-fbp-to-dot built, or no graphviz or imagemagick installed in the host system"
	$(Q)echo "     If lacking graphviz or imagemagick, after installing it run: make reconf"
endif

PHONY += cheat-sheet
