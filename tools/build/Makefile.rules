find-deps = $(foreach dep,$($(1)-deps),$($(dep)-out))

known-module-type = \
	$(foreach curr,$(module-types), \
		$(if $(filter $(curr)%,$(subst ./src/modules/,,$(1))),$(strip $(curr))) \
	) \

module-type = \
	$(eval curr-mod-type:=$(call known-module-type,$(1))) \
	$(if $(curr-mod-type),$(curr-mod-type),external) \

flow-type = \
	$(sort $(if $(filter $(flow-dir)%,$(1)), \
		$(subst /,,$(subst $(flow-dir),,$(dir $(1))))) \
	)

linux-micro-type = \
	$(sort $(if $(filter $(linux-micro-dir)%,$(1)), \
		$(subst /,,$(subst $(linux-micro-dir),,$(dir $(1))))) \
	)

pin-mux-type = \
	$(sort $(if $(filter $(pin-mux-dir)%,$(1)), \
		$(subst /,,$(subst $(pin-mux-dir),,$(dir $(1))))) \
	)

all-gen-hdrs = $(foreach gen,$(all-gens),$($(gen)-hdr))

gen-artifact = \
	$(foreach json,$(filter %.json,$(2)), \
		$(eval $(json)-hdr   := $(build_includedir)$(notdir $(subst .json,-gen.h,$(json)))) \
		$(eval $(json)-src   := $(subst $(top_srcdir)src,$(build_stagedir),$(subst .json,-gen.c,$(json)))) \
		$(eval all-gens      += $(json)) \
		$(eval $(json)-desc  := $(build_descdir)$(1).json) \
		$(eval all-mod-descs += $($(json)-desc)) \
		$(eval $(1)-gens     += $(json)) \
		$(eval $(1)-gen-cflags+= $(addprefix -I,$(dir $($(json)-src)))) \
	) \

extra-headers = \
	$(foreach hdr,$(1), \
		$(eval $(hdr)-dest  := $(build_includedir)$(notdir $(hdr))) \
		$(eval all-dest-hdr += $($(hdr)-dest)) \
		$(eval all-hdr += $(hdr)) \
	) \

parse-common-module = \
	$(eval artifacts    := $(addprefix $(2),$(obj-$(1)-$(3)))) \
	$(eval mod-headers  := $(addprefix $(2),$(headers-$(1)-$(3)))) \
	$(call extra-headers,$(mod-headers)) \
	$(call gen-artifact,$(1),$(filter %.json,$(artifacts))) \
	$(eval mod-objs     := $(filter %.o,$(artifacts))) \
	$(eval $(1)-cflags  := $(obj-$(1)-$(3)-extra-cflags)) \
	$(eval $(1)-ldflags := $(obj-$(1)-$(3)-extra-ldflags)) \
	$(eval $(1)-bs      := $(addprefix $(2),Makefile)) \
	$(eval $(1)-bs      += $(if $(wildcard $(2)/Kconfig),$(addprefix $(2),Kconfig))) \
	$(eval $(1)-hdrs    := $(filter %.h,$(artifacts))) \
	$(foreach obj,$(mod-objs), \
		$(eval dest-obj        := $(subst $(top_srcdir)src/,$(build_stagedir),$(obj))) \
		$(eval $(dest-obj)-src := $(subst .o,.c,$(obj))) \
		$(eval $(1)-srcs       := $($(dest-obj)-src)) \
	        $(eval $(1)-objs       += $(dest-obj)) \
		$(eval all-objs        += $(dest-obj)) \
	)\

parse-builtin-module = \
	$(call parse-common-module,$(1),$(2),y) \
	$(eval builtin-cflags      += $($(1)-cflags)) \
	$(eval builtin-ldflags     += $($(1)-ldflags)) \
	$(eval builtin-objs        += $($(1)-objs)) \
	$(eval builtin-flows       += $(call flow-type,$(artifacts))) \
	$(eval builtin-linux-micro += $(call linux-micro-type,$(artifacts))) \
	$(eval builtin-pin-mux 	   += $(call pin-mux-type,$(artifacts))) \

parse-mod-output = \
	$(if $(filter yes,$(obj-$(1)-static)), \
		$(eval $(mod)-out := $(addprefix $(subst $(top_srcdir)src/,$(build_stagedir),$(subdir)),$(mod)).a) \
		$(eval mod-ar     += $(1)), \
		$(eval out-prefix := $(build_modulesdir)$(strip $(call module-type,$(2)))) \
	        $(eval $(1)-out   := $(out-prefix)/$(1).so) \
		$(eval mod-so     += $(1)) \
	) \

parse-mod-module = \
	$(call parse-common-module,$(1),$(2),m) \
	$(eval $(mod)-deps     := $(subst .mod,,$(obj-$(mod)-m-deps))) \
	$(call parse-mod-output,$(1),$(2)) \
	$(eval modules-out += $($(mod)-out)) \

parse-bin = \
	$(eval bin-$(1)-srcs := $(addprefix $(2),$(bin-$(1)-y))) \
	$(eval bin-$(1)-out  := $(addprefix $(build_bindir),$(1))) \
	$(eval bin-$(1)-cflags := $(bin-$(1)-y-extra-cflags)) \
	$(eval bin-$(1)-ldflags := $(bin-$(1)-y-extra-ldflags)) \
	$(eval $(1)-deps     := $(subst .mod,,$(bin-$(1)-y-deps))) \
	$(eval bins-out      += $(bin-$(1)-out)) \

parse-test = \
	$(eval test-$(1)-srcs := $(addprefix $(2),$($(3)-$(1)-y))) \
	$(eval test-$(1)-out  := $(addprefix $(2),$(1))) \
	$(eval test-$(1)-cflags := $($(3)-$(1)-y-extra-cflags)) \
	$(eval test-$(1)-ldflags := $($(3)-$(1)-y-extra-ldflags)) \
	$(eval $(1)-deps      := $(subst .mod,,$($(3)-$(1)-y-deps))) \
	$(eval tests-out      += $(test-$(1)-out)) \

parse-sample = \
	$(eval sample-$(1)-srcs := $(addprefix $(2),$(sample-$(1)-y))) \
	$(eval sample-$(1)-out  := $(addprefix $(2),$(1))) \
	$(eval $(1)-deps        := $(subst .mod,,$(sample-$(1)-y-deps))) \
	$(eval samples-out      += $(sample-$(1)-out)) \

clean-control = $(eval headers-y:=) $(eval obj-y:=) $(eval obj-m:=) $(eval bin-y:=) \
		$(eval test-y:=) $(eval test-internal-y:=) $(eval sample-y:=)

inc-subdirs = \
	$(foreach subdir,$(SUBDIRS), $(clean-control) \
		$(eval -include $(subdir)Makefile) \
		$(call extra-headers,$(addprefix $(subdir),$(headers-y))) \
		$(eval curr-builtins        := $(subst .mod,,$(filter %.mod,$(obj-y)))) \
		$(eval builtins             += $(curr-builtins)) \
		$(foreach buin,$(curr-builtins), \
			$(call parse-builtin-module,$(buin),$(subdir)) \
		) \
		$(eval curr-modules        := $(subst .mod,,$(filter %.mod,$(obj-m)))) \
		$(eval modules             += $(curr-modules)) \
		$(foreach mod,$(curr-modules), \
			$(call parse-mod-module,$(mod),$(subdir)) \
		) \
		$(eval curr-bins := $(bin-y)) \
		$(eval bins += $(curr-bins)) \
		$(foreach bin,$(curr-bins), \
			$(call parse-bin,$(bin),$(subdir)) \
		) \
		$(eval tests += $(test-y)) \
		$(foreach test,$(test-y), \
			$(call parse-test,$(test),$(subdir),test) \
		) \
		$(eval tests-internal += $(test-internal-y)) \
		$(foreach test,$(test-internal-y), \
			$(call parse-test,$(test),$(subdir),test-internal) \
		) \
		$(eval samples += $(sample-y)) \
		$(foreach sample,$(sample-y), \
			$(call parse-sample,$(sample),$(subdir)) \
		) \
		$(clean-control) \
	)

extra-bins = \
	$(foreach bin,$(EXTRA_BINS), \
		$(eval $(bin)-dest  := $(build_bindir)$(notdir $(bin))) \
		$(eval all-dest-bin += $($(bin)-dest)) \
	) \

ifneq ($(M),)
SUBDIRS += $(M)/
endif # $(M)

$(eval $(call inc-subdirs))
$(eval $(call extra-headers,$(EXTRA_HEADERS)))
$(eval $(call extra-bins))

PRE_GEN += $(all-gen-hdrs) $(all-dest-hdr) $(all-dest-bin)

define make-extra-header
$($(1)-dest): $(1)
	$(Q)echo "    "INST"   "$$@
	$(Q)$(MKDIR) -p $(dir $($(1)-dest))
	$(Q)$(CP) $(1) $($(1)-dest)
endef
$(foreach hdr,$(all-hdr),$(eval $(call make-extra-header,$(hdr))))

define make-extra-bin
$($(1)-dest): $(1)
	$(Q)echo "    "INST"   "$$@
	$(Q)$(MKDIR) -p $(dir $($(1)-dest))
	$(Q)$(INSTALL) -m755 $(1) $($(1)-dest)
endef
$(foreach bin,$(EXTRA_BINS),$(eval $(call make-extra-bin,$(bin))))

define make-bin
$(bin-$(1)-out): $(PRE_GEN) $(SOL_LIB_SO) $(bin-$(1)-srcs) $(call find-deps,$(1))
	$(Q)echo "     "BIN"   "$$@
	$(Q)$(MKDIR) -p $(dir $(bin-$(1)-out))
	$(Q)$(TARGETCC) $(BIN_CFLAGS) $(bin-$(1)-cflags) $(filter-out %.h,$(bin-$(1)-srcs)) -o $(bin-$(1)-out) $(BIN_LDFLAGS) $(bin-$(1)-ldflags) $(sort $(builtin-ldflags))
endef
$(foreach curr,$(bins),$(eval $(call make-bin,$(curr))))

define make-sample
$(sample-$(1)-out): $(PRE_GEN) $(SOL_LIB_SO) $(sample-$(1)-srcs) $(call find-deps,$(1))
	$(Q)echo "     "SMP"   "$$@
	$(Q)$(TARGETCC) $(SAMPLE_CFLAGS) $(sample-$(1)-cflags) $(filter-out %.h,$(sample-$(1)-srcs)) -o $(sample-$(1)-out) $(SAMPLE_LDFLAGS) $(sample-$(1)-ldflags) $(sort $(builtin-ldflags))
endef
$(foreach sample,$(samples),$(eval $(call make-sample,$(sample))))

define make-test
$(test-$(1)-out): $(PRE_GEN) $(SOL_LIB_SO) $(test-$(1)-srcs) $(call find-deps,$(1))
	$(Q)echo "     "TST"   "$$@
	$(Q)$(TARGETCC) $(TEST_CFLAGS) $(test-$(1)-cflags) $(filter-out %.h,$(test-$(1)-srcs)) \
	$(call find-deps,$(1)) -o $$@ $(TEST_LDFLAGS) $(test-$(1)-ldflags)
endef
$(foreach curr,$(tests),$(eval $(call make-test,$(curr))))

define make-test-internal
$(test-$(1)-out): $(PRE_GEN) $(SOL_LIB_SO) $(test-$(1)-srcs) $(call find-deps,$(1))
	$(Q)echo "     "TST"   "$$@
	$(Q)$(TARGETCC) $(TEST_INT_CFLAGS) $(test-$(1)-cflags) $(filter-out %.h,$(test-$(1)-srcs)) \
	$(builtin-objs) $(call find-deps,$(1)) -o $$@ $(sort $(builtin-ldflags)) $(TEST_INT_LDFLAGS) $(test-$(1)-ldflags)
endef
$(foreach curr,$(tests-internal),$(eval $(call make-test-internal,$(curr))))

find-gen-hdrs = $(foreach gen,$($(2)-gens),$($(gen)-hdr))
external-module-flags = -DSOL_FLOW_NODE_TYPE_MODULE_EXTERNAL=1 -DSOL_PLATFORM_LINUX_MICRO_MODULE_EXTERNAL=1 -DSOL_PIN_MUX_MODULE_EXTERNAL=1

define make-object
$(1): $(PRE_GEN) $($(1)-src) $(call find-deps,$(2)) $(find-gen-hdrs)
	$(Q)echo "      "CC"   "$$@
	$(Q)$(MKDIR) -p $(dir $(1))
	$(Q)$(TARGETCC) $(OBJ_CFLAGS) $($(2)-gen-cflags) $(sort $($(2)-cflags)) $($(1)-src) -c -o $(1) $(3)
endef
$(foreach mod,$(modules), \
	$(foreach obj,$($(mod)-objs),$(eval $(call make-object,$(obj),$(mod),$(external-module-flags)))) \
)

$(foreach buin,$(builtins), \
	$(foreach obj,$($(buin)-objs), $(eval $(call make-object,$(obj),$(buin)))) \
)

define make-mod-so
$($(1)-out): $(SOL_LIB_SO) $(PRE_GEN) $($(1)-objs) $(call find-deps,$(1)) $($(1)-bs)
	$(Q)echo "     "MOD"   "$$@
	$(Q)$(MKDIR) -p $(dir $($(1)-out))
	$(Q)$(TARGETCC) $(MOD_CFLAGS) $(sort $($(1)-cflags)) $($(1)-objs) -shared -o $($(1)-out) $(sort $($(1)-ldflags))
endef
$(foreach curr,$(mod-so),$(eval $(call make-mod-so,$(curr))))

define make-mod-ar
$($(1)-out): $(PRE_GEN) $($(1)-objs) $(call find-deps,$(1)) $($(1)-bs)
	$(Q)echo "      "AR"   "$$@
	$(Q)$(MKDIR) -p $(dir $($(1)-out))
	$(Q)$(TARGETAR) $(TARGET_ARFLAGS) $($(1)-out) $($(1)-objs)
endef
$(foreach curr,$(mod-ar),$(eval $(call make-mod-ar,$(curr))))

$(SOL_LIB_AR): $(PRE_GEN) $(all-objs)
	$(Q)echo "      "AR"   "$(@)
	$(Q)$(MKDIR) -p $(dir $(SOL_LIB_AR))
	$(Q)$(TARGETAR) $(TARGET_ARFLAGS) $(@) $(all-objs)

$(SOL_LIB_SO): $(PRE_GEN) $(SOL_LIB_AR) $(builtin-objs)
	$(Q)echo "      "LD"   "$(@)
	$(Q)$(MKDIR) -p $(dir $(SOL_LIB_SO))
	$(Q)$(TARGETCC) -shared $(builtin-objs) $(sort $(builtin-ldflags)) $(LIB_LDFLAGS) -o $(@).$(VERSION)
	$(Q)$(LN) -fs $(notdir $(@).$(VERSION)) $(@)

$(DEPENDENCY_CACHE):
	$(Q)$(PYTHON) $(DEPENDENCY_SCRIPT) --compiler="$(TARGETCC)" --cflags="$(DEP_RESOLVER_CFLAGS)" \
		--prefix="$(PREFIX)" --cache="$(DEPENDENCY_CACHE)"

$(KCONFIG_GEN): $(DEPENDENCY_CACHE)
	$(Q)$(PYTHON) $(DEPENDENCY_SCRIPT) --compiler="$(TARGETCC)" --cflags="$(DEP_RESOLVER_CFLAGS)" \
		--prefix="$(PREFIX)" --cache="$(DEPENDENCY_CACHE)" --kconfig-gen

$(MAKEFILE_GEN): $(DEPENDENCY_CACHE) $(KCONFIG_CONFIG)
	$(Q)$(PYTHON) $(DEPENDENCY_SCRIPT) --compiler="$(TARGETCC)" --cflags="$(DEP_RESOLVER_CFLAGS)" \
		--prefix="$(PREFIX)" --cache="$(DEPENDENCY_CACHE)" --definitions-header="$(DEFINITIONS_H)" \
		--makefile-gen

reconf: $(DEPENDENCY_SCRIPT)
	$(Q)echo "[re]running dependency-resolver..."
	$(Q)$(RM) -f $(DEPENDENCY_FILES)
	$(Q)$(RM) $(DEPENDENCY_CACHE)
	$(Q) V=1 $(PYTHON) $(DEPENDENCY_SCRIPT) --compiler=$(TARGETCC) --cflags="$(DEP_RESOLVER_CFLAGS)" \
		--prefix="$(PREFIX)" --definitions-header="$(DEFINITIONS_H)" \
		--cache="$(DEPENDENCY_CACHE)" --kconfig-gen --makefile-gen

PHONY += reconf

# generators
define make-gen
$($(1)-hdr) $($(1)-src) $($(1)-desc): $(1) $(NODE_TYPE_GEN_SCRIPT)
	$(Q)echo "     "GEN"   "$$@
	$(Q)$(MKDIR) -p $(dir $($(1)-hdr))
	$(Q)$(MKDIR) -p $(dir $($(1)-src))
	$(Q)$(MKDIR) -p $(dir $($(1)-desc))
	$(Q)$(PYTHON) $(NODE_TYPE_GEN_SCRIPT) --prefix=sol-flow-node-type \
		--genspec-schema=$(NODE_TYPE_SCHEMA) $(1) $($(1)-hdr) $($(1)-src) $($(1)-desc)
endef
$(foreach gen,$(all-gens),$(eval $(call make-gen,$(gen))))

$(FLOW_BUILTINS_DESC): $(PRE_GEN) $(SOL_LIB_SO) $(SOL_LIB_AR) $(all-mod-descs) $(JSON_FORMAT_SCRIPT)
	$(Q)echo "     "GEN"   "$@
	$(Q)$(MKDIR) -p $(dir $(@))
	$(Q)$(PYTHON) $(FLOW_MERGE_BUILTINS_SCRIPT) --modules-dir=$(build_descdir) $(@) $(builtin-flows)

define install-resource
$(2): $(1)
	$(Q)echo "    "INST"   "$(1)
	$(Q)$(MKDIR) -p $(dir $(2))
	$(Q)$(CP) $(1) $(2)
endef

$(eval $(call install-resource,$(NODE_TYPE_SCHEMA),$(NODE_TYPE_SCHEMA_DEST)))
$(eval $(call install-resource,$(PLATFORM_DETECT),$(PLATFORM_DETECT_DEST)))
$(eval $(call install-resource,$(GDB_AUTOLOAD_PY),$(GDB_AUTOLOAD_PY_DEST)))

$(FLOW_OIC_GEN): $(FLOW_OIC_GEN_SCRIPT)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(FLOW_OIC_GEN_SCRIPT) $(FLOW_OIC_SPEC_DIR) $(FLOW_OIC_GEN) &>/dev/null

$(FLOW_NODE_TYPES_H): $(NODE_TYPE_H_GEN_SCRIPT) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(NODE_TYPE_H_GEN_SCRIPT) $(FLOW_NODE_TYPES_H) $(all-gen-hdrs)

$(LINUX_MICRO_BUILTINS_H): $(BUILTINS_SCRIPT) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(BUILTINS_SCRIPT) --output=$@ \
		--array="static const struct sol_platform_linux_micro_module *SOL_PLATFORM_LINUX_MICRO_MODULE_ALL[]" \
		--count="SOL_PLATFORM_LINUX_MICRO_MODULE_COUNT" \
		--decl="struct sol_platform_linux_micro_module SOL_PLATFORM_LINUX_MICRO_MODULE_@NAME@" \
		--item="&SOL_PLATFORM_LINUX_MICRO_MODULE_@NAME@" \
		$(subst -,_,$(builtin-linux-micro))

$(FLOW_BUILTINS_H): $(BUILTINS_SCRIPT) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(BUILTINS_SCRIPT) \
		--output=$@ \
		--array="static const void *SOL_FLOW_BUILTIN_NODE_TYPE_ALL[]" \
		--count="SOL_FLOW_BUILTIN_NODE_TYPE_COUNT" \
		--decl="const struct sol_flow_node_type *sol_flow_foreach_builtin_node_type_@name@(bool (*)(void *, const struct sol_flow_node_type *), const void *)" \
		--item="sol_flow_foreach_builtin_node_type_@name@" \
		$(subst -,_,$(builtin-flows))

$(PIN_MUX_BUILTINS_H): $(BUILTINS_SCRIPT) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(BUILTINS_SCRIPT) \
                --output=$@ \
                --array="static const struct sol_pin_mux *SOL_PIN_MUX_BUILTINS_ALL[]" \
                --count="SOL_PIN_MUX_BUILTIN_COUNT" \
                --decl="const struct sol_pin_mux SOL_PIN_MUX_@NAME@" \
                --item="&SOL_PIN_MUX_@NAME@" \
                $(subst -,_,$(builtin-pin-mux))

$(FLOW_BUILDOPTS_H): $(FLOW_BUILDOPTS_H_IN) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(TEMPLATE_SCRIPT) --context-files $(KCONFIG_CONFIG) $(MAKEFILE_GEN) \
		--template=$(FLOW_BUILDOPTS_H_IN) --output=$(FLOW_BUILDOPTS_H)

$(COMMON_BUILDOPTS_H): $(COMMON_BUILDOPTS_H_IN) $(KCONFIG_CONFIG) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(@)
	$(Q)$(PYTHON) $(TEMPLATE_SCRIPT) --context-files $(KCONFIG_CONFIG) $(MAKEFILE_GEN) \
		--template=$(COMMON_BUILDOPTS_H_IN) --output=$(COMMON_BUILDOPTS_H)

$(PC_GEN): $(PC_GEN_IN) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(PC_GEN)
	$(Q)$(MKDIR) -p $(dir $(PC_GEN))
	$(Q)$(PYTHON) $(TEMPLATE_SCRIPT) --context-files $(KCONFIG_CONFIG) $(MAKEFILE_GEN) \
		--template=$(PC_GEN_IN) --output=$(PC_GEN)

$(NODE_TYPE_GEN_SCRIPT): $(NODE_TYPE_GEN_SCRIPT_IN) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(NODE_TYPE_GEN_SCRIPT)
	$(Q)$(MKDIR) -p $(dir $(NODE_TYPE_GEN_SCRIPT))
	$(Q)$(PYTHON) $(TEMPLATE_SCRIPT) --context-files $(KCONFIG_CONFIG) $(MAKEFILE_GEN) \
		--template=$(NODE_TYPE_GEN_SCRIPT_IN) --output=$(NODE_TYPE_GEN_SCRIPT)

$(FLOW_NODE_TYPE_FIND): $(FLOW_NODE_TYPE_FIND_IN) $(KCONFIG_CONFIG)
	$(Q)echo "     "GEN"   "$(FLOW_NODE_TYPE_FIND)
	$(Q)$(PYTHON) $(TEMPLATE_SCRIPT) --context-files $(KCONFIG_CONFIG) $(MAKEFILE_GEN) \
		--template=$(FLOW_NODE_TYPE_FIND_IN) --output=$(FLOW_NODE_TYPE_FIND)

# common build targets
define clean-resource
	$(Q)echo "   "CLEAN"   "$(1)
	$(Q)$(RM) -Rf $(1)

endef

cleanup-files := $(tests-out) $(CLEANUP_GEN) $(kconfig-clean-objs)
cleanup-files += $(BUILDDIR) $(CHEAT_SHEET_INDEX_HTML) $(DOXYGEN_GENERATED)

clean:
	$(foreach curr,$(wildcard $(cleanup-files)),$(call clean-resource,$(curr)))

PHONY += clean

distclean: clean
	$(Q)$(RM) -Rf .config* $(DEPENDENCY_FILES) $(KCONFIG_INCLUDE) $(DEPENDENCY_CACHE)

PHONY += distclean

$(KCONFIG_AUTOHEADER): $(KCONFIG_CONFIG)
	$(MAKE) -f $(top_srcdir)Makefile silentoldconfig
