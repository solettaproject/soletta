#!/usr/bin/env python

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# import some stuff from the future to guarantee compatibility
# between python 2 and 3
from __future__ import absolute_import
from __future__ import print_function

from io import open

import argparse
import difflib
import logging
import os
import re
import subprocess
import sys

DEFAULT_VALGRIND_OPTS = (
    "--show-reachable=no",
    "--quiet",
    "--error-exitcode=1",
    "--leak-check=full",
)

class FbpTest:
    SKIP_NONE = 0
    SKIP_SIMPLE = 1
    SKIP_VALGRIND = 2
    SKIP_COMPILE = 3

    SUPPORTED_SKIP = {
        "TEST-SKIP": SKIP_SIMPLE,
        "TEST-SKIP-VALGRIND": SKIP_VALGRIND,
        "TEST-SKIP-COMPILE": SKIP_COMPILE,
    }

    def __init__(self, test_file):
        self.test_file = test_file
        self.skip_msg = None
        self.skip = self.SKIP_NONE
        self.output = False
        self.output_regex = False
        self.output_spec = ""
        self.exit_code = 0
        self.extra_args = ""
        self.precondition = ""

        self._parse_test()

    def _parse_skip(self, cmd, splitted):
        self.skip = self.SUPPORTED_SKIP.get(cmd, self.SKIP_NONE)
        if not self.skip:
            return

        if len(splitted) > 2:
            self.skip_msg = splitted[2]

    def _parse_command(self, line):
        splitted = line.split(None)
        cmd = splitted[1]

        if cmd == "TEST-OUTPUT-REGEX":
            self.output_regex = True
        elif cmd == "TEST-OUTPUT":
            self.output = True
        elif cmd == "TEST-EXPECTS-ERROR":
            self.exit_code = 1
        elif cmd.startswith("TEST-SKIP"):
            self._parse_skip(cmd, splitted)
        elif cmd.startswith("TEST-EXTRA-ARGS"):
            self.extra_args = splitted[2:]
        elif cmd.startswith("TEST-PRECONDITION"):
            self.precondition = splitted[2:]
        else:
            logging.info("Ignoring unknown test command '%s' in test %s" %
                         (cmd, self.test_file))

    def _parse_test(self):
        for line in open(self.test_file, encoding="UTF-8"):
            if line.startswith("## "):
                self._parse_command(line)
            elif (self.output or self.output_regex) and line.startswith("#"):
                self.output_spec += line[2:] or "\n"

    def should_skip(self, skips):
        if self.skip == self.SKIP_NONE:
            return False
        elif self.skip in skips:
            return True
        return False

    def show_result_status(self, out, code):
        if self.output and self.output_spec != out:
            orig = out.splitlines(True)
            dest = self.output_spec.splitlines(True)
            logging.warning("FAILED running %s: wrong output" % os.path.basename(self.test_file))
            for line in difflib.unified_diff(orig, dest):
                sys.stdout.write(line)
            return "failed"
        elif self.output_regex and not re.match(self.output_spec, out):
            logging.warning("FAILED running %s: wrong output" % os.path.basename(self.test_file))
            logging.warning("Expected expression:")
            logging.warning(self.output_spec)
            logging.warning("Output:")
            logging.warning(out)
            return "failed"
        elif self.exit_code != code:
            logging.warning("FAILED running %s: wrong exit code, got %d but expected %d" %
                            (os.path.basename(self.test_file), code, self.exit_code))
            logging.warning("Output:")
            logging.warning(out)
            return "failed"
        elif self.output is None and len(out) > 0:
            logging.warning("IGNORING unexpected output from", os.path.basename(self.test_file))
            logging.warning(out)
        return "passed"

def sh(cmd, cwd=None):
    try:
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, cwd=cwd).decode('utf-8')
        return out, 0
    except subprocess.CalledProcessError as err:
        return err.output.decode('utf-8'), err.returncode

def is_valid_fbp(f):
    return os.path.basename(f)[0] != '_' and os.path.splitext(f)[1] == ".fbp"

def collect_tests_dir(dir, result):
    for root, subdirs, files in os.walk(dir):
        for f in files:
            if is_valid_fbp(f):
                result.add(os.path.join(root, f))
        for d in subdirs:
            collect_tests_dir(d, result)

def collect_tests(tests):
    result = set()
    for t in args.tests:
        t = os.path.abspath(t)
        if not os.path.exists(t):
            logging.warning("Ignoring non-existent test file or directory", t)
            continue

        if os.path.isdir(t):
            collect_tests_dir(t, result)
        elif is_valid_fbp(t):
            result.add(t)
    return sorted(result)

def valgrind_prepare(args):
    cmd_prefix = []

    if not args.valgrind:
        return cmd_prefix

    valgrind = os.path.abspath(args.valgrind)
    if not os.path.isfile(valgrind) and os.access(valgrind, os.X_OK):
        sys.exit("Couldn't find valid executable valgrind program at: %s, check if file "
                 "exists and is executable" % valgrind)
    valgrind_opts = list(DEFAULT_VALGRIND_OPTS)
    valgrind_opts.insert(0, valgrind)
    cmd_prefix.extend(valgrind_opts)

    if args.valgrind_supp:
        supp = os.path.abspath(args.valgrind_supp)
        if not os.path.abspath(supp):
            sys.exit("Couldn't find valgrind suppression file at", supp)
        cmd_prefix.append("--suppressions=%s" % supp)

    return cmd_prefix

def run_tests(args):
    failures = False
    runner = None

    if not args.compiled:
        runner = os.path.abspath(args.runner)
        if not os.path.isfile(runner):
            sys.exit("Couldn't find runner program at %s" % runner)

    tests = collect_tests(args.tests)
    if not tests:
        sys.exit("No test files found.")

    cmd_prefix = valgrind_prepare(args)
    status = {
        "passed": 0,
        "failed": 0,
        "skipped": 0
    }

    skips = get_skip_list(args)
    if args.valgrind:
        skips.add(FbpTest.SKIP_VALGRIND)

    for t in tests:
        path = {
            "dir": os.path.dirname(t),
            "file": os.path.basename(t),
        }

        logging.debug("Testing file: %s" % t)

        curr = FbpTest(t)
        if curr.should_skip(skips):
            logging.debug("SKIPPED running %s: %s" % (t, curr.skip_msg))
            status["skipped"] += 1
            continue

        if not args.compiled:
            cmd = cmd_prefix + [runner]

            if curr.extra_args:
                cmd += curr.extra_args

            cmd += [path["file"]]
            test_cwd = path["dir"]
        else:
            exe = os.path.join(args.compiled_dir, path["file"].replace(".fbp", ""))
            cmd = cmd_prefix + [exe]
            test_cwd = "./"

        result = ""
        if curr.precondition:
            out, code = sh(curr.precondition, cwd=test_cwd)
            if code != 0:
                logging.warning("Precondition failed for test %s: %d",
                        curr.test_file, code)
                result = "failed"

        if not result:
            out, code = sh(cmd, cwd=test_cwd)
            result = curr.show_result_status(out, code)

        status[result] += 1
        if result == "failed":
            failures = True

    for k,v in status.items():
        if v > 0:
            logging.warning("%d tests %s." % (v, k))

    if failures:
        sys.exit(1)

def get_skip_list(args):
    result = set()
    for curr in args.skip:
        if not curr.upper().startswith('SKIP_'):
            logging.info("Invalid skip spec: %s" % curr)
            continue

        skip = getattr(FbpTest, curr.upper(), None)
        if not skip:
            logging.info("Unknown skip spec: %s" % curr)

        result.add(skip)
    return result

def query_tests(args):
    result = []
    skips = get_skip_list(args)
    tests = collect_tests(args.tests)
    for t in tests:
        curr = FbpTest(t)
        if curr.should_skip(skips):
            continue
        result.append(t)
    print(" ".join(result))

def set_log_level(args):
    if not args.log:
        logging.debug("No log level specified, using default one: INFO")
        level = logging.INFO
    else:
        level = getattr(logging, args.log.upper(), None)
        if not level:
            raise ValueError('Invalid log level: %s' % args.log)

    root = logging.getLogger()
    hdlr = root.handlers[0]
    fmt = logging.Formatter('%(message)s')
    hdlr.setFormatter(fmt)
    hdlr.setLevel(level)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--runner", help="Path to the sol-fbp-runner program",
                        default="build/soletta_sysroot/usr/bin/sol-fbp-runner", type=str)
    parser.add_argument("--valgrind", help="Enable valgrind, if path not provided, assume "
                        "default location in the system", nargs='?', const="/usr/bin/valgrind",
                        type=str)
    parser.add_argument("--valgrind-supp", help="Path to valgrind's suppression file",
                        type=str)
    parser.add_argument("--log", help="The log level, valid are: DEBUG, INFO, WARNING, ERROR, CRITICAL",
                        type=str)
    parser.add_argument("--query-only", help="Only query for tests expected to be run",
                        action="store_true")
    parser.add_argument("--skip", help="Skips to consider, valid values are: SKIP_SIMPLE, "
                        "SKIP_VALGRIND, SKIP_COMPILE. SKIP_SIMPLE and SKIP_VALGRIND are considered "
                        "by default", nargs="*", default=["SKIP_SIMPLE"])
    parser.add_argument("tests", metavar="TEST", help="Path to FBP file or directory containing "
                        "FBP file to be tested.", nargs='*', default=["src/test-fbp/"])
    parser.add_argument("--compiled", help="Run compiled tests - not the FBPs themselves.",
                        action="store_true")
    parser.add_argument("--compiled-dir", help="Where to find the compiled tests.", type=str,
                        default="build/stage/test-fbp")

    args = parser.parse_args()
    set_log_level(args)
    if args.query_only:
        query_tests(args)
    else:
        run_tests(args)
