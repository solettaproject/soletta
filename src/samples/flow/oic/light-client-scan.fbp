#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This will timely (every 3 seconds) trigger scan for OIC lights.
# The oic node type and IO node types are resolved using the
# light-client-scan-gtk.json or light-client-scan-edison.json files.
#
# To run this sample using a gtk backend, use light-client-scan-gtk.json.
# To run this sample in an edison device, use light-client-scan-edison.json
# and connect an LCD to I2C port, 3 buttons in ports IO3, IO4 and IO7 and a
# LED to IO8.
#
# Then run:
#
#    $ export SOL_FLOW_MODULE_RESOLVER_CONFFILE=light-client-backend.json
#    $ ./light-client-scan.fbp
#
# or save the desired json file as sol-flow.json

#Input/Output nodes
lcd(LCD)
next(BtnNext)
select(BtnSelect)
light_button(BtnLight)
status(LEDStatus)
_(constant/boolean:value=false) OUT -> IN status

#Scanning
light(Light)
light_selector(form/selector:rows=2,columns=16,circular=true)

_(constant/empty) OUT -> SCAN light
light DEVICE_ID -> ADD_ITEM light_selector
light_selector STRING -> IN lcd

next OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> NEXT light_selector
select OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> SELECT light_selector
light FOUND -> IN status
light_button OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN toggle(boolean/toggle) OUT -> IN_STATE light

#DeviceID Persistence
timer OUT -> IN selected_send(converter/empty-to-string) OUT -> SELECTED light_selector
persistence OUT -> OUTPUT_VALUE selected_send
light_selector SELECTED -> IN persistence(DeviceIDPersistence)
persistence OUT -> DEVICE_ID light
