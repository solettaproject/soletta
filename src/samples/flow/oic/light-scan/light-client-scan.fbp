#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This will wait for 3 seconds, then scan for OIC lights.
# The oic node type and IO node types are resolved by
# sol-flow.json, using gtk backend, or sol-flow-intel-edison-rev-c.json.
#
# To run this sample in an edison device connect an LCD to I2C port,
# 3 buttons in ports IO3, IO4 and IO7 and a
# LED to IO8.
#
# Then run:
#
#    $ ./light-client-scan.fbp

#Input/Output nodes
lcd(LCD)
next(BtnNext)
select(BtnSelect)
light_button(BtnLight)
status(LEDStatus)
_(constant/boolean:value=false) OUT -> IN status

wait(constant/string:value="Wait...") OUT -> IN lcd

#Scanning
light(oic/client-light)
light_selector(form/selector:rows=2,columns=16,circular=true)

scan(timer:interval=3000) OUT -> SCAN light
light DEVICE_ID -> ADD_ITEM light_selector
light_selector STRING -> IN lcd
scan OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED scan

next OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> NEXT light_selector
select OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> SELECT light_selector
light OUT_STATE -> IN status
light OUT_STATE -> IN CStatus(console)
light OUT_POWER -> IN CPower(console)
light_button OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN toggle(boolean/toggle) OUT -> IN_STATE light

#DeviceID Persistence
light_selector SELECTED -> IN persistence(DeviceIDPersistence)
persistence OUT -> DEVICE_ID light
persistence OUT -> SELECTED light_selector
