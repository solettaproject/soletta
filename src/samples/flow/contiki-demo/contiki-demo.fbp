#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This is a trash disposer that was write to show Soletta working on a board
# running Contiki.
# The behavior here is pretty simple, you press the button it make the servo
# motors to spin 180 degrees, causing the trash being thrown away, after
# 3 seconds it return to the initial position.

base_servo(servo-motor/controller:chip=0,duty_cycle_range=min:1000|max:2000,period=20000,pin=0)
top_servo(servo-motor/controller:chip=0,duty_cycle_range=min:1000|max:2000,period=20000,pin=1)
button(gpio/reader:active_low=false,edge_falling=true,edge_rising=true,pin=15)
led(gpio/writer:active_low=false,pin=16)
timer_reset(timer:interval=3000)
button_active(converter/boolean-to-empty)

_(constant/int:value=1000) OUT -> DUTY_CYCLE base_servo
_(constant/int:value=1000) OUT -> DUTY_CYCLE top_servo
_(constant/boolean:value=false) OUT -> ENABLED timer_reset

# button pressed
button OUT -> PULSE_IF_TRUE button_active
button_active OUT -> IN _(converter/empty-to-int:output_value=2000) OUT -> DUTY_CYCLE base_servo
button_active OUT -> IN _(converter/empty-to-int:output_value=2000) OUT -> DUTY_CYCLE top_servo
button_active OUT -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer_reset
button OUT -> IN _(boolean/filter) TRUE -> IN led

# after 3 seconds of button pressed
timer_reset OUT -> IN _(converter/empty-to-int:output_value=1000) OUT -> DUTY_CYCLE base_servo
timer_reset OUT -> IN _(converter/empty-to-int:output_value=1000) OUT -> DUTY_CYCLE top_servo
timer_reset OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> IN led
timer_reset OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_reset