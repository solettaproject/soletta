#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# SOL_FLOW_MODULE_RESOLVER_CONFFILE=galileo-grove-kit.json sol-fbp-runner grove-led-accumulator.fbp

# This is one of the translations of Grove_LED/Grove_LED.ino, from
# https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino.git
# Here we exemplify the usage of the accumulator node type in order to
# do the original file's looping. There's a more direct, less verbose
# way of doing that, though -- check grove-led-wave-generator.fbp

# We split the duty_cycle of 2040816 ns (490 Hz for full intensity),
# into 256 slices of 7971, mimicking analogWrite()'s range: 0 to 255

false(constant/boolean:value=false)
constant_max(constant/int:value=255)
constant_min(constant/int:value=0)

timer_mid_delay(timer:interval=100) OUT -> RESET timer_dec
false OUT -> ENABLED timer_mid_delay

timer_final_delay(timer:interval=500) OUT -> RESET timer_inc
false OUT -> ENABLED timer_final_delay

timer_inc(timer:interval=5)
timer_inc OUT -> INC acc(int/accumulator:setup_value=min:0|max:2032605|step:7971)
timer_inc OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_final_delay

timer_dec(timer:interval=5)
timer_dec OUT -> DEC acc
timer_dec OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_mid_delay
false OUT -> ENABLED timer_dec

acc OUT -> DUTY_CYCLE led(LED_PWM)

acc OUT -> IN[0] comp_max(int/equal)
constant_max OUT -> IN[1] comp_max
comp_max OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN at_max(converter/empty-to-boolean:output_value=true)
at_max OUT -> IN _(boolean/not) OUT -> ENABLED timer_inc
at_max OUT -> RESET timer_mid_delay

acc OUT -> IN[0] comp_min(int/equal)
constant_min OUT -> IN[1] comp_min
comp_min OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN at_min(converter/empty-to-boolean:output_value=true)
at_min OUT -> IN _(boolean/not) OUT -> ENABLED timer_dec
at_min OUT -> RESET timer_final_delay
