#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# SOL_FLOW_MODULE_RESOLVER_CONFFILE=galileo-grove-kit.conf sol-fbp-runner grove-led-generator.fbp

# This is one of the translations of Grove_LED/Grove_LED.ino, from
# https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino.git
# Here we exemplify the usage of the wave generator node type in order
# to do the original file's looping. There's another example doing
# that by means of the accumulator node -- check
# grove-led-accumulator.fbp

# We split the duty_cycle of 2040816 ns (490 Hz for full intensity),
# into 256 slices of 7971, mimicking analogWrite()'s range: 0 to 255

constant_duty_cycle_step(constant/float:value=7971)

timer(timer:interval=5)

# min_ticks: 100 * 5 ms = 500 ms. max_ticks: 20 * 5 ms = 100 ms
wave(wave-generator/trapezoidal:min=0,max=255,ticks_inc=255,ticks_dec=255,ticks_at_min=100,ticks_at_max=20,tick_start=100)

timer OUT -> TICK wave

constant_duty_cycle_step OUT -> OPERAND[1] mult(float/multiplication)
wave OUT -> OPERAND[0] mult
mult OUT -> IN conv(converter/float-to-int) OUT -> DUTY_CYCLE led(LED_PWM)
