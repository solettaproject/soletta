#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# sol-fbp-runner grove-lc-text-direction.fbp

# This is a translation of
# Grove_RGB_BackLight_LCD/TextDirection/TextDirection.ino, from
# https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino.git

# In this sample, we start to print the alphabet from left to right,
# switch the direction after m and then again after s, just to start
# from the origin again.

timer(timer:interval=1000)
lcd(LCDChar:underline_cursor=true)

# 'a' to 'z'
chars(int/accumulator:setup_value=val:97|min:97|max:122|step:1)
chars OUT -> IN to_byte(converter/int-to-byte)

chars OUT -> IN[0] comp_m(int/equal)
_(constant/int:value=109) OUT -> IN[1] comp_m

to_byte OUT -> OUTPUT_VALUE curr_char(converter/empty-to-byte:output_value=97)
curr_char OUT -> PUT_CHAR lcd

timer OUT -> IN curr_char
timer OUT -> INC chars

comp_m OUT -> IN _(boolean/filter) TRUE -> IN _(boolean/not) OUT -> LEFT_TO_RIGHT lcd

chars OUT -> IN[0] comp_s(int/equal)
_(constant/int:value=115) OUT -> IN[1] comp_s

comp_s OUT -> IN _(boolean/filter) TRUE -> LEFT_TO_RIGHT lcd

chars OVERFLOW -> IN _(converter/empty-to-int:output_value=0) OUT -> COL lcd
