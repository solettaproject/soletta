#!/usr/bin/env sol-fbp-runner

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# sol-fbp-runner grove-led-accumulator.fbp

# This is one of the translations of Grove_LED/Grove_LED.ino, from
# https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino.git
# Here we exemplify the usage of the accumulator node type in order to
# do the original file's looping. There's a more direct, less verbose
# way of doing that, though -- check grove-led-wave-generator.fbp

# We split the duty_cycle of 2040816 ns (490 Hz for full intensity),
# into 256 slices of 7971, mimicking analogWrite()'s range: 0 to 255

false(constant/boolean:value=false)
constant_max(constant/int:value=255)
constant_min(constant/int:value=0)

timer_mid_delay(timer:interval=100) OUT -> RESET timer_dec
false OUT -> ENABLED timer_mid_delay

timer_final_delay(timer:interval=500) OUT -> RESET timer_inc
false OUT -> ENABLED timer_final_delay

timer_inc(timer:interval=5)
timer_inc OUT -> INC acc(int/accumulator:setup_value=min:0|max:2032605|step:7971)
timer_inc OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_final_delay

timer_dec(timer:interval=5)
timer_dec OUT -> DEC acc
timer_dec OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_mid_delay
false OUT -> ENABLED timer_dec

acc OUT -> DUTY_CYCLE led(LED_PWM)

acc OUT -> IN[0] comp_max(int/equal)
constant_max OUT -> IN[1] comp_max
comp_max OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN at_max(converter/empty-to-boolean:output_value=true)
at_max OUT -> IN _(boolean/not) OUT -> ENABLED timer_inc
at_max OUT -> RESET timer_mid_delay

acc OUT -> IN[0] comp_min(int/equal)
constant_min OUT -> IN[1] comp_min
comp_min OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN at_min(converter/empty-to-boolean:output_value=true)
at_min OUT -> IN _(boolean/not) OUT -> ENABLED timer_dec
at_min OUT -> RESET timer_final_delay
