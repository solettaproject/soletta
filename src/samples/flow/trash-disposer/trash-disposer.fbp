#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This is a trash disposer with a pretty simple behavior, you press the
# button it make the base servo to spin 180 degrees and enable enable two
# timers one to expire at 1.5seg and another to expire in 250ms.
# When the 250ms timer expire it will spin the top servo to 180 degrees.
# When the 1.5sec timer expire it will return both servos to the initial
# position.

base_servo(BaseServo)
top_servo(TopServo)
button(Button)
led(Led)

timer_top_servo(timer:interval=250)
timer_reset(timer:interval=1500)

# servo converter connection
duty_cycle_base_servo(converter/boolean-to-int:false_value=1000,true_value=2000) OUT -> DUTY_CYCLE base_servo
duty_cycle_top_servo(converter/boolean-to-int:false_value=1000,true_value=2000) OUT -> DUTY_CYCLE top_servo

# initial state
false(constant/boolean:value=false) OUT -> ENABLED timer_reset
false OUT -> ENABLED timer_top_servo
false OUT -> IN duty_cycle_base_servo
false OUT -> IN duty_cycle_top_servo

# button pressed, move base servo
button OUT -> IN button_filter(boolean/filter)
button_filter TRUE -> IN duty_cycle_base_servo
button_filter TRUE -> ENABLED timer_reset
button_filter TRUE -> ENABLED timer_top_servo
button_filter TRUE -> IN led

# after 250ms of button pressed
timer_top_servo OUT -> IN _(converter/empty-to-boolean:output_value=true) OUT -> IN duty_cycle_top_servo
timer_top_servo OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer_top_servo

# after 1.5sec of button pressed
timer_reset OUT -> IN reset_empty_to_false(converter/empty-to-boolean:output_value=false)
reset_empty_to_false OUT -> IN duty_cycle_base_servo
reset_empty_to_false OUT -> IN duty_cycle_top_servo
reset_empty_to_false OUT -> IN led
reset_empty_to_false OUT -> ENABLED timer_reset
