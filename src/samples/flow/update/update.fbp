#!/usr/bin/env sol-fbp-runner

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Checks for update to Soletta app displaying progress of FETCH
# task.
# To perform the update, it is necessary that a update module is loaded
# as backend. Each backend may be affected by different compile time
# options or environment variables.
# If there's more than one module available for Soletta, Soletta will
# arbitrarily load one of them, or the one defined by SOL_UPDATE_MODULE
# environment variable.
# Linux Micro EFI Update module understands the following environment
# variables:
#   - SOL_UPDATE_META_URL which defines the URL that it will look for
#   update information.
#   - SOL_UPDATE_FETCH_URL which defines the URL to fetch update file.
#   - SOL_APP_FILE_PATH which defines application path.
# Get more help for this module on kbuild menuconfig at
# Core Library -> Update Options -> Soletta Linux Micro EFI Update

check(update/check)
fetch(update/fetch)
install(update/install)

fetch_progress_timer(timer:interval=10)
fetch_progress_timer OUT -> GET_PROGRESS fetch
_(constant/boolean:value=false) OUT -> ENABLED fetch_progress_timer

check ERROR -> IN error_check(console)
fetch ERROR -> IN error_fetch(console)
install ERROR -> IN error_install(console)

_(constant/int:value=0) OUT -> CHECK check

check VERSION -> IN print_version(console)
check SIZE -> IN print_size(console)
check NEED_UPDATE -> IN print_need_update(console)
check NEED_UPDATE -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> FETCH fetch
check NEED_UPDATE -> ENABLED fetch_progress_timer

fetch PROGRESS -> IN print_progress(console)
fetch SUCCESS -> IN print_fetch_success(console)
fetch SUCCESS -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> INSTALL install
fetch SUCCESS -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED fetch_progress_timer

install SUCCESS -> IN print_success(console)
