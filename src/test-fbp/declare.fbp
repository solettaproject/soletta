# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DECLARE=MyAdder:fbp:_adder22.fbp

_(constant/int:value=20) OUT -> IN adder(MyAdder)

adder OUT -> IN0 equal_sum(int/equal)
_(constant/int:value=42) OUT -> IN1 equal_sum

equal_sum OUT -> RESULT using_adder_22_fbp_works(test/result)


# Check that we can use the type twice.

_(constant/int:value=1) OUT -> IN other_adder(MyAdder)

other_adder OUT -> IN0 other_equal_sum(int/equal)
_(constant/int:value=23) OUT -> IN1 other_equal_sum

other_equal_sum OUT -> RESULT using_other_adder_22_fbp_works(test/result)

# Check thatthe type works with options.

_(constant/int:value=1) OUT -> IN adder_with_opts(MyAdder:add_value=666)

adder_with_opts OUT -> IN0 third_equal(int/equal)
_(constant/int:value=667) OUT -> IN1 third_equal

third_equal OUT -> RESULT using_adder_22_with_options(test/result)
