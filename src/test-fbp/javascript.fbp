# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

## TEST-SKIP-JAVASCRIPT This will prevent that sol-fbp-generator generates C code for this fbp if duktape is not available.

DECLARE=MyScript:js:javascript.js
DECLARE=Composed:composed-new:KEY(string)|VALUE(int)
DECLARE=Splitter:composed-split:STRING_VALUE(string)|INT_VALUE(int)

http-server(http-server/string:port=8080, path="/", value="Hi from localhost")

_(constant/boolean:value=true) OUT -> IN_BOOLEAN s(MyScript)
_(constant/byte:value=66) OUT -> IN_BYTE s
_(constant/float:value=0.42) OUT -> IN_FLOAT s
_(constant/int:value=42) OUT -> IN_INT s
_(constant/rgb:value=0|125|255) OUT -> IN_RGB s
_(constant/string:value="my string") OUT -> IN_STRING s
Timestamp(timestamp/time) OUT -> IN_TIMESTAMP s
_(constant/direction-vector:value=10|5|3) OUT -> IN_DIRECTION_VECTOR s
_(constant/string:value="This will become a blob!") OUT -> IN _(converter/string-to-blob) OUT -> IN_BLOB s
_(constant/string:value="[1,2,3]") OUT -> IN _(converter/string-to-json-array) OUT -> IN_JSON_ARRAY s
_(constant/string:value="{\"required\":true, \"number\": 2}") OUT -> IN _(converter/string-to-json-object) OUT -> IN_JSON_OBJECT s
_(constant/string:value="http://localhost:8080/") OUT -> URL requester(http-client/request:method="GET") OUT -> IN_HTTP_RESPONSE s
_(constant/empty) OUT -> TRIGGER requester
_(constant/string:value="ComposedKey") OUT -> KEY Composed(Composed) OUT -> IN_COMPOSED s
_(constant/int:value=1000) OUT -> VALUE Composed

s OUT_BOOLEAN -> IN _(test/boolean-validator:sequence="T") OUT -> RESULT TestBoolean(test/result)

s OUT_BYTE -> IN _(test/byte-validator:sequence="66") OUT -> RESULT TestByte(test/result)

s OUT_FLOAT -> IN _(test/float-validator:sequence="0.42") OUT -> RESULT TestFloat(test/result)

s OUT_INT -> IN I_(test/int-validator:sequence="42") OUT -> RESULT TestInt(test/result)

s OUT_RGB -> IN ConverterRgbJs(converter/rgb-to-int) RED -> IN RgbValidator(test/int-validator:sequence="0 125 255") OUT -> RESULT TestRgb(test/result)
ConverterRgbJs GREEN -> IN RgbValidator
ConverterRgbJs BLUE -> IN RgbValidator

s OUT_STRING -> IN _(test/string-validator:sequence="my string") OUT -> RESULT TestString(test/result)

s OUT_TIMESTAMP -> IN[0] TimestampEqual(timestamp/equal) OUT -> RESULT TestTimestamp(test/result)
Timestamp OUT -> IN[1] TimestampEqual

s OUT_BLOB -> IN _(test/blob-validator:expected="This will become a blob!", expect_terminating_null_byte=true) OUT -> RESULT TestBlob(test/result)

s OUT_JSON_OBJECT -> IN _(converter/json-object-to-blob) OUT -> IN _(test/blob-validator:expected="{\"required\":true, \"number\": 2}") OUT -> RESULT TestJsonObject(test/result)

s OUT_JSON_ARRAY -> IN _(converter/json-array-to-blob) OUT -> IN _(test/blob-validator:expected="[1,2,3]") OUT -> RESULT TestJsonArray(test/result)

s OUT_DIRECTION_VECTOR -> IN DirectionVectorConverter(converter/direction-vector-to-int) X -> IN DirectionValidator(test/int-validator:sequence="10 5 3") OUT -> RESULT TestDirectionVector(test/result)
DirectionVectorConverter Y -> IN DirectionValidator
DirectionVectorConverter Z -> IN DirectionValidator

s OUT_HTTP_RESPONSE -> IN _(http-client/get-url) OUT -> IN _(test/string-validator:sequence="http://localhost:8080/") OUT -> RESULT TestUrl(test/result)
s OUT_HTTP_RESPONSE -> IN _(http-client/get-content-type) OUT -> IN _(test/string-validator:sequence="text/plain") OUT -> RESULT TestContentType(test/result)
s OUT_HTTP_RESPONSE -> IN _(http-client/get-response-code) OUT -> IN _(test/int-validator:sequence="200") OUT -> RESULT TestResponseCode(test/result)
s OUT_HTTP_RESPONSE -> IN _(http-client/get-content) OUT -> IN _(test/blob-validator:expected="Hi from localhost") OUT -> RESULT TestContent(test/result)
s OUT_HTTP_RESPONSE -> IN _(http-client/get-headers:key="Content-Type") OUT -> IN _(test/string-validator:sequence="text/plain") OUT -> RESULT TestHeader(test/result)

s OUT_COMPOSED -> IN Splitter(Splitter) STRING_VALUE -> IN _(test/string-validator:sequence="ComposedKey") OUT -> RESULT TestComposedString(test/result)
Splitter INT_VALUE -> IN _(test/int-validator:sequence=1000) OUT -> RESULT TestComposedValue(test/result)
