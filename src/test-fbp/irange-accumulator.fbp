# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

generator(test/boolean-generator:sequence="TTTTTTTTTTTTTTTTTTTTT")

dec_acc(int/accumulator:setup_value=min:-20|max:0|step:1,initial_value=0)
validator_dec(test/int-validator:sequence="0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 0")

generator OUT -> DEC dec_acc
dec_acc OUT -> IN validator_dec
validator_dec OUT -> RESULT t1(test/result)

inc_acc(int/accumulator:setup_value=min:0|max:20|step:1,initial_value=0)
validator_inc(test/int-validator:sequence="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 0")

generator OUT -> INC inc_acc
inc_acc OUT -> IN validator_inc
validator_inc OUT -> RESULT t2(test/result)

generator_(test/boolean-generator:sequence="TTTTTT")

underflow_acc(int/accumulator:setup_value=min:-25|max:25|step:5,initial_value=0)
generator_ OUT -> DEC underflow_acc
underflow_acc UNDERFLOW -> IN _(converter/empty-to-boolean) OUT -> RESULT t3(test/result)

overflow_acc(int/accumulator:setup_value=min:-25|max:25|step:5,initial_value=0)
generator_ OUT -> INC overflow_acc
overflow_acc OVERFLOW -> IN _(converter/empty-to-boolean) OUT -> RESULT t4(test/result)
