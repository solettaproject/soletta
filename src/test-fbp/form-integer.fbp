# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#up selection
integer_00(form/int:rows=3,columns=10)
_(test/boolean-generator:sequence="TT",interval=20) OUT -> UP integer_00
validator_00(test/string-validator:sequence="0         |1         |2         ")
integer_00 STRING -> IN validator_00 OUT -> RESULT _(test/result)

#go backwards on items (circular selector)
integer_01(form/int:rows=3,columns=10,circular=true)
_(test/boolean-generator:sequence="TT",interval=20) OUT -> DOWN integer_01
validator_01(test/string-validator:sequence="0         |2147483647|2147483646")
integer_01 STRING -> IN validator_01 OUT -> RESULT _(test/result)

#up selection and select
integer_02(form/int:rows=3,columns=10)
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_02
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_02
validator_02(test/string-validator:sequence="0         |1         |1         ")
validator_items_02(test/int-validator:sequence="1")
and_02(boolean/and)
integer_02 STRING -> IN validator_02 OUT -> IN[0] and_02
integer_02 SELECTED -> IN validator_items_02 OUT -> IN[1] and_02
and_02 OUT -> RESULT _(test/result)

#up selection and select, one row only, custom range
integer_03(form/int:rows=1,columns=10,range=0|-3|5|2)
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_03
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_03
validator_03(test/string-validator:sequence="-3        |-1        |-1        ")
validator_items_03(test/int-validator:sequence="-1")
and_03(boolean/and)
integer_03 STRING -> IN validator_03 OUT -> IN[0] and_03
integer_03 SELECTED -> IN validator_items_03 OUT -> IN[1] and_03
and_03 OUT -> RESULT _(test/result)

#up selection and select, with title
integer_04(form/int:rows=2,columns=10,format="{title}{value}",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_04
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_04
validator_04(test/string-validator:sequence="Title     \n0         |Title     \n1         |Title     \n1         ")
validator_items_04(test/int-validator:sequence="1")
and_04(boolean/and)
integer_04 STRING -> IN validator_04 OUT -> IN[0] and_04
integer_04 SELECTED -> IN validator_items_04 OUT -> IN[1] and_04
and_04 OUT -> RESULT _(test/result)

#up selection and select, with title and footer
integer_05(form/int:rows=3,columns=10,format="{title}{value}footer",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_05
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_05
validator_05(test/string-validator:sequence="Title     \n0         \nfooter    |Title     \n1         \nfooter    |Title     \n1         \nfooter    ")
validator_items_05(test/int-validator:sequence="1")
and_05(boolean/and)
integer_05 STRING -> IN validator_05 OUT -> IN[0] and_05
integer_05 SELECTED -> IN validator_items_05 OUT -> IN[1] and_05
and_05 OUT -> RESULT _(test/result)

#up selection and select, with title and footer, more rows
integer_06(form/int:rows=5,columns=10,format="{title}{value}footer\nother",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_06
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_06
validator_06(test/string-validator:sequence="Title     \n0         \nfooter    \nother     |Title     \n1         \nfooter    \nother     |Title     \n1         \nfooter    \nother     ")
validator_items_06(test/int-validator:sequence="1")
and_06(boolean/and)
integer_06 STRING -> IN validator_06 OUT -> IN[0] and_06
integer_06 SELECTED -> IN validator_items_06 OUT -> IN[1] and_06
and_06 OUT -> RESULT _(test/result)

#up selection and select, with title and footer, more rows, less columns
integer_07(form/int:rows=5,columns=5,format="{title}{value}footer",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_07
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_07
validator_07(test/string-validator:sequence="Title\n0    \nfoote|Title\n1    \nfoote|Title\n1    \nfoote")
validator_items_07(test/int-validator:sequence="1")
and_07(boolean/and)
integer_07 STRING -> IN validator_07 OUT -> IN[0] and_07
integer_07 SELECTED -> IN validator_items_07 OUT -> IN[1] and_07
and_07 OUT -> RESULT _(test/result)

#up selection and select, with title, footer and intermediate strings
integer_08(form/int:rows=10,columns=10,format="pre\ntitle{title}inter\nvalue{value}footer\nother_footer",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_08
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_08
validator_08(test/string-validator:sequence="pre       \ntitle     \nTitle     \ninter     \nvalue     \n0         \nfooter    \nother_foot|pre       \ntitle     \nTitle     \ninter     \nvalue     \n1         \nfooter    \nother_foot|pre       \ntitle     \nTitle     \ninter     \nvalue     \n1         \nfooter    \nother_foot")
validator_items_08(test/int-validator:sequence="1")
and_08(boolean/and)
integer_08 STRING -> IN validator_08 OUT -> IN[0] and_08
integer_08 SELECTED -> IN validator_items_08 OUT -> IN[1] and_08
and_08 OUT -> RESULT _(test/result)

#up selection, while disabled
integer_09(form/int:rows=3,columns=10)
_(constant/boolean:value=false) OUT -> ENABLED integer_09
_(test/boolean-generator:sequence="TT",interval=20) OUT -> UP integer_09
validator_09(test/string-validator:sequence="0         ")
integer_09 STRING -> IN validator_09 OUT -> RESULT _(test/result)

#up selection and select, one row only, *with title*
integer_10(form/int:rows=1,columns=10,format="{title}{value}",title="Title")
_(test/boolean-generator:sequence="T",interval=10) OUT -> UP integer_10
_(test/boolean-generator:sequence="T",interval=20) OUT -> SELECT integer_10
validator_10(test/string-validator:sequence="Title 0   |Title 1   |Title 1   ")
validator_items_10(test/int-validator:sequence="1")
and_10(boolean/and)
integer_10 STRING -> IN validator_10 OUT -> IN[0] and_10
integer_10 SELECTED -> IN validator_items_10 OUT -> IN[1] and_10
and_10 OUT -> RESULT _(test/result)

#up selection, custom labels, pre-selection (note that the initial
#status is always the default one, to be updated quickly by the
#SELECTED port's processing afterwards)
integer_11(form/int:rows=3,columns=10)
_(constant/int:value=3) OUT -> SELECTED integer_11
_(test/boolean-generator:sequence="TT",interval=20) OUT -> UP integer_11
validator_11(test/string-validator:sequence="0         |3         |4         |5         ")
integer_11 STRING -> IN validator_11 OUT -> RESULT _(test/result)

## TEST-SKIP-VALGRIND The timing we're relying on for the string sequence is blown away by Valgrind, so skip it.
