# This file is part of the Solettaâ„¢ Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

full_string(constant/string:value="Hello World")
same_string(constant/string:value="Hello World")
full_upper_string(constant/string:value="HELLO WORLD")
lesser_string(constant/string:value="Hello")
greater_string(constant/string:value="World")

zero(constant/int:value=0)

full_string OUT -> IN[0] cmp_same(string/compare)
same_string OUT -> IN[1] cmp_same EQUAL -> RESULT full_and_same_are_equal(test/result)
cmp_same OUT -> IN[0] cmp_same_is_zero(int/equal)
zero OUT -> IN[1] cmp_same_is_zero OUT -> RESULT full_and_same_gives_zero(test/result)

lesser_string OUT -> IN[0] cmp_less(string/compare)
full_string OUT -> IN[1] cmp_less EQUAL -> IN not_cmp_less(boolean/not)
not_cmp_less OUT -> RESULT lesser_and_full_are_not_equal(test/result)

cmp_less OUT -> IN[0] cmp_less_than_zero(int/less)
zero OUT -> IN[1] cmp_less_than_zero OUT -> RESULT lesser_and_full_gives_less_than_zero(test/result)

greater_string OUT -> IN[0] cmp_great(string/compare)
full_string OUT -> IN[1] cmp_great EQUAL -> IN not_cmp_great(boolean/not)
not_cmp_great OUT -> RESULT greater_and_full_are_not_equal(test/result)

cmp_great OUT -> IN[0] cmp_greater_than_zero(int/greater)
zero OUT -> IN[1] cmp_greater_than_zero OUT -> RESULT greater_and_full_gives_greater_than_zero(test/result)

lesser_string OUT -> IN[0] cmp_bytes(string/compare:chars=5)
full_string OUT -> IN[1] cmp_bytes EQUAL -> RESULT comparing_n_bytes_equal(test/result)
cmp_bytes OUT -> IN[0] cmp_bytes_is_zero(int/equal)
zero OUT -> IN[1] cmp_bytes_is_zero OUT -> RESULT comparing_n_bytes_gives_zero(test/result)


# regular comparison should fail if case differs
full_string OUT -> IN[0] cmp_case(string/compare)
full_upper_string OUT -> IN[1] cmp_case
cmp_case EQUAL -> IN _(boolean/not) OUT -> RESULT full_and_upper_differs(test/result)

# but should works if ignore_case is set
full_string OUT -> IN[0] cmp_ignore_case(string/compare:ignore_case=true)
full_upper_string OUT -> IN[1] cmp_ignore_case
cmp_ignore_case EQUAL -> RESULT full_and_upper_are_equal_if_ignore_case(test/result)
