# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DECLARE=Param:composed-new:KEY(string)|VALUE(string)

UrlNoParams(http-client/create-url) OUT -> IN[0] CmpNoParams(string/compare) EQUAL -> RESULT UrlNoParamsTest(test/result)
UrlNoParamsString(constant/string:value="http://www.example.com") OUT -> IN[1] CmpNoParams
UrlNoParamsString OUT -> BASE_URI UrlNoParams
UrlNoParamsString OUT -> CREATE UrlNoParams

UrlWithParams(http-client/create-url:base_uri="http://www.example.com/GOAS") OUT -> IN[0] CmpWithParams(string/compare) EQUAL -> RESULT UrlWithParamsTest(test/result)

EncodedParam(Param) OUT -> PARAM UrlWithParams
NotEncodedParam(Param) OUT -> PARAM UrlWithParams

_(constant/string:value="This Key Should be encoded !!*/&%$$Â¨") OUT -> KEY EncodedParam
_(constant/string:value="My precious value %#&**(),,") OUT -> VALUE EncodedParam

_(constant/string:value="SimpleKey") OUT -> KEY NotEncodedParam
_(constant/string:value="SimpleValue") OUT -> VALUE NotEncodedParam

_(constant/string:value="go") OUT -> PATH UrlWithParams

_(constant/string:value="MyFragment") OUT -> FRAGMENT UrlWithParams

_(constant/int:value=1234) OUT -> PORT UrlWithParams

NotEncodedParam OUT -> CREATE UrlWithParams

_(constant/string:value="http://www.example.com:1234/go?This%20Key%20Should%20be%20encoded%20%21%21%2A%2F%26%25%24%24%C2%A8=My%20precious%20value%20%25%23%26%2A%2A%28%29%2C%2C&SimpleKey=SimpleValue#MyFragment") OUT -> IN[1] CmpWithParams
