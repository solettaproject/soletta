# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

const_boolean(constant/boolean:value=1)
const_byte(constant/byte:value=10)
const_float(constant/float:value=100.5)
const_int(constant/int:value=10)
const_rgb(constant/rgb:value=255|10|100)
const_direction_vector(constant/direction-vector:value=255|10|100)
const_string(constant/string:value="Hello")
const_error(constant/string:value="Numerical argument out of domain (errno 33)")
const_timestamp(constant/string:value="2016-09-23T09:30:00")
conv_timestamp(converter/string-to-timestamp)
conv_timestamp_str(converter/timestamp-to-string:format="%Y-%m-%dT%H:%M:%S")

hub_boolean(switcher/boolean)
hub_blob(switcher/blob)
hub_byte(switcher/byte)
hub_empty(switcher/empty)
hub_error(switcher/error)
hub_float(switcher/float)
hub_int(switcher/int)
hub_rgb(switcher/rgb)
hub_direction_vector(switcher/direction-vector)
hub_string(switcher/string)
hub_timestamp(switcher/timestamp)

empty_to_boolean(converter/empty-to-boolean)

const_boolean OUT -> IN[0] hub_boolean
const_boolean OUT -> IN[0] and(boolean/and)
hub_boolean OUT[0] -> IN[1] and
and OUT -> RESULT result_switcher_boolean(test/result)

const_boolean OUT -> IN[0] hub_empty
hub_empty OUT[0] -> IN empty_to_boolean OUT -> RESULT result_switcher_empty(test/result)

const_byte OUT -> IN[0] hub_byte
const_byte OUT -> IN[0] byte_equal(byte/equal)
hub_byte OUT[0] -> IN[1] byte_equal
byte_equal OUT -> RESULT result_switcher_byte(test/result)

const_float OUT -> IN[0] hub_float
const_float OUT -> IN[0] float_equal(float/equal)
hub_float OUT[0] -> IN[1] float_equal
float_equal OUT -> RESULT result_switcher_float(test/result)

const_int OUT -> IN[0] hub_int
const_int OUT -> IN[0] int_equal(int/equal)
hub_int OUT[0] -> IN[1] int_equal
int_equal OUT -> RESULT result_switcher_int(test/result)

const_rgb OUT -> IN[0] hub_rgb
const_int OUT -> IN[0] rgb_equal
hub_rgb OUT[0] -> IN _(converter/rgb-to-int) GREEN -> IN[1] rgb_equal(int/equal)
rgb_equal OUT -> RESULT result_switcher_rgb(test/result)

const_direction_vector OUT -> IN[0] hub_direction_vector
const_int OUT -> IN[0] direction_vector_equal
hub_direction_vector OUT[0] -> IN _(converter/direction-vector-to-int) Y -> IN[1] direction_vector_equal(int/equal)
direction_vector_equal OUT -> RESULT result_switcher_direction_vector(test/result)

const_string OUT -> IN[0] hub_string
const_string OUT -> IN[0] string_equal(string/compare)
hub_string OUT[0] -> IN[1] string_equal
string_equal EQUAL -> RESULT result_switcher_string(test/result)

str_to_blob(converter/string-to-blob)
blob_validator(test/blob-validator:expected="Hello",expect_terminating_null_byte=true)
const_string OUT -> IN str_to_blob OUT -> IN blob_validator
blob_validator OUT -> RESULT result_switcher_blob(test/result)

const_timestamp OUT -> IN conv_timestamp
conv_timestamp OUT -> IN[0] hub_timestamp
const_timestamp OUT -> IN[0] timestamp_equal(string/compare)
hub_timestamp OUT[0] -> IN conv_timestamp_str OUT -> IN[1] timestamp_equal
timestamp_equal EQUAL -> RESULT result_switcher_timestamp(test/result)

const_int OUT -> DIVIDEND div(int/division)
const_zero(constant/int:value=0) OUT -> DIVISOR div
div ERROR -> IN[0] hub_error
hub_error ERROR -> IN conv_error(converter/error)
conv_error MESSAGE -> IN[0] error_msg_equal(string/compare)
const_error OUT -> IN[1] error_msg_equal
error_msg_equal EQUAL -> RESULT result_switcher_error(test/result)

## TEST-OUTPUT-REGEX
# WRN: .* Division by zero: 10, 0
