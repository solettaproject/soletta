# This file is part of the Solettaâ„¢ Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

input1(constant/int:value=0xf0f0f0f0)
input2(constant/int:value=0x0f0f0f0f)
all_one(constant/int:value=0xffffffff)
all_zero(constant/int:value=0x00000000)
one(constant/int:value=1)
min_int(constant/int:value=0x80000000)
max_int(constant/int:value=0x7fffffff)
minus_one(constant/int:value=-1)

input1 OUT -> IN[0] and(int/bitwise-and)
input2 OUT -> IN[1] and
and OUT -> IN[0] cmp_expected_and(int/equal)
all_zero OUT -> IN[1] cmp_expected_and
cmp_expected_and OUT -> RESULT test_int_bitwise_and(test/result)

input1 OUT -> IN[0] or(int/bitwise-or)
input2 OUT -> IN[1] or
or OUT -> IN[0] cmp_expected_or(int/equal)
all_one OUT -> IN[1] cmp_expected_or
cmp_expected_or OUT -> RESULT test_int_bitwise_or(test/result)

input1 OUT -> IN[0] xor(int/bitwise-xor)
all_one OUT -> IN[1] xor
xor OUT -> IN[0] cmp_expected_xor(int/equal)
input2 OUT -> IN[1] cmp_expected_xor
cmp_expected_xor OUT -> RESULT test_int_bitwise_xor(test/result)

input1 OUT -> IN not(int/bitwise-not)
not OUT -> IN[0] cmp_expected_not(int/equal)
input2 OUT -> IN[1] cmp_expected_not
cmp_expected_not OUT -> RESULT test_int_bitwise_not(test/result)

min_int OUT -> IN shiftl(int/shift-left)
one OUT -> SHIFT shiftl
shiftl OUT -> IN[0] cmp_expected_shiftl(int/equal)
all_zero OUT -> IN[1] cmp_expected_shiftl
cmp_expected_shiftl OUT -> RESULT test_int_bitwise_shift_left(test/result)

min_int OUT -> IN shiftl_error(int/shift-left)
minus_one OUT -> SHIFT shiftl_error
shiftl_error ERROR -> IN _(converter/empty-to-boolean) OUT -> PASS test_int_bitwise_shift_left_error(test/result)

all_one OUT -> IN shiftr(int/shift-right)
one OUT -> SHIFT shiftr
shiftr OUT -> IN[0] cmp_expected_shiftr(int/equal)
max_int OUT -> IN[1] cmp_expected_shiftr
cmp_expected_shiftr OUT -> RESULT test_int_bitwise_shift_right(test/result)
