# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

median_result(constant/int:value=6)
median_buffer(int/buffer:operation=median)
median_equal(int/equal)

gen1(test/int-generator:sequence="0 4 8 12") OUT -> IN median_buffer

median_buffer OUT -> IN[0] median_equal
median_result OUT -> IN[1] median_equal

median_equal OUT -> RESULT test_median_even(test/result)

# --------------------------

median_result2(constant/int:value=2)
median_buffer2(int/buffer:operation=median)
median_equal2(int/equal)
gen2(test/int-generator:sequence="1 2 3") OUT -> IN median_buffer2
timeout(constant/int:value=1) OUT -> TIMEOUT median_buffer2

median_buffer2 OUT -> IN[0] median_equal2
median_result2 OUT -> IN[1] median_equal2
median_equal2 OUT -> RESULT test_median_odd(test/result)

# --------------------------

mean_result(constant/int:value=6)
mean_buffer(int/buffer)
mean_equal(int/equal)

gen3(test/int-generator:sequence="0 4 5 15") OUT -> IN mean_buffer

mean_buffer OUT -> IN[0] mean_equal
mean_result OUT -> IN[1] mean_equal

mean_equal OUT -> RESULT test_mean(test/result)

# --------------------------

gen4(test/int-generator:sequence="0 4 5 8 10 3")

validator_not_circular(test/int-validator:sequence="3 7")
mean_buffer_not_circular(int/buffer:samples=3)

gen4 OUT -> IN mean_buffer_not_circular
mean_buffer_not_circular OUT -> IN validator_not_circular
validator_not_circular OUT -> RESULT test_not_circular(test/result)

# --------------------------

validator_circular(test/int-validator:sequence="3 5 7 7")
mean_buffer_circular(int/buffer:samples=3,circular=true)

gen4 OUT -> IN mean_buffer_circular
mean_buffer_circular OUT -> IN validator_circular
validator_circular OUT -> RESULT test_circular(test/result)

# ----- Timeout tests ------

gen5(test/int-generator:sequence="10 20", interval=40)
timeout_buffer(int/buffer:timeout=100)
timeout_equal(int/equal)
timeout_result(constant/int:value=15)

gen5 OUT -> IN timeout_buffer
timeout_buffer OUT -> IN[0] timeout_equal
timeout_result OUT -> IN[1] timeout_equal
timeout_equal OUT -> RESULT test_timeout(test/result)

gen6(test/int-generator:sequence="10 20 30", interval=40)
timeout_buffer2(int/buffer:timeout=100)
validator_timeout(test/int-validator:sequence="15 30")

gen6 OUT -> IN timeout_buffer2
timeout_buffer2 OUT -> IN validator_timeout
validator_timeout OUT -> RESULT test_timeout_seq(test/result)

validator_timeout2(test/int-validator:sequence="15 20")
timeout_buffer3(int/buffer:timeout=100, circular=true)

gen6 OUT -> IN timeout_buffer3
timeout_buffer3 OUT -> IN validator_timeout2
validator_timeout2 OUT -> RESULT test_timeout_circular_seq(test/result)

# ----- Timeout error ------

negative_number(constant/int:value=-2) OUT -> TIMEOUT buffer_error(int/buffer)
buffer_error ERROR -> IN trigger(converter/empty-to-int)
trigger OUT -> PASS test_timeout_error(test/result)
