# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

thirty_float(constant/float:value=30)
minus_one(constant/float:value=-1)
zero(constant/float:value=0)
overflow(constant/float:value=256)
in_range(constant/float:value=255)
thirty_byte(constant/byte:value=30)

float_to_byte(converter/float-to-byte)
byte_to_float(converter/byte-to-float)

thirty_float OUT -> IN float_to_byte
float_to_byte OUT -> IN byte_to_float
byte_to_float OUT -> IN[0] equal(float/equal)
thirty_float OUT -> IN[1] equal OUT -> RESULT _(test/result)

minus_one OUT -> IN _(converter/float-to-byte) OUT -> IN _(converter/byte-to-float) OUT -> IN[0] equal_zero(float/equal)
zero OUT -> IN[1] equal_zero OUT -> RESULT underflow(test/result)

overflow OUT -> IN _(converter/float-to-byte) OUT -> IN _(converter/byte-to-float) OUT -> IN[0] equal_two_five_five(float/equal)
in_range OUT -> IN[1] equal_two_five_five OUT -> RESULT r_overflow(test/result)
