#!/usr/bin/env bash

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SCRIPT_DIR=$(dirname $(realpath ${BASH_SOURCE[0]}))

# default build location
RUNNER=$PWD/build/soletta_sysroot/usr/bin/sol-fbp-runner

if [ -n "$SOL_FBP_RUNNER_BIN" ]; then
    RUNNER=$SOL_FBP_RUNNER_BIN
fi

COUNT=0
CMD_PREFIX=
TMP_FILE=$(mktemp -t check-fbp.XXXXXX)

if [ -n "$VALGRIND" ]; then
    CMD_PREFIX="$VALGRIND --show-reachable=no --quiet --error-exitcode=1 --leak-check=full"
    if [-n "$TEST_VALGRIND_SUPP" ]; then
	CMD_PREFIX="$CMD_PREFIX --suppressions=$TEST_VALGRIND_SUPP"
    fi
fi

cd $SCRIPT_DIR

for test in *.fbp */*.fbp; do
    # Files starting with _ are "subflows" to be used by tests.
    if [[ $test == *"/_"* || $test == "_"* ]]; then
       continue
    fi

    if [[ $test == *"_disabled.fbp" ]]; then
	echo Skipping $test
	continue
    fi

    if [[ $V == 1 ]]; then
	echo Running $test
    fi

    $CMD_PREFIX $RUNNER $test &> $TMP_FILE
    EXIT_CODE=$?

    EXPECTED_FILE=
    EXPECTED_EXIT_CODE=0

    SUCCESS_EXPECTED=${test%.fbp}-expected.txt
    FAIL_EXPECTED=${test%.fbp}-expected-fail.txt
    if [ -f $SUCCESS_EXPECTED ]; then
	EXPECTED_FILE=$SUCCESS_EXPECTED
    elif [ -f $FAIL_EXPECTED ]; then
	EXPECTED_FILE=$FAIL_EXPECTED
	EXPECTED_EXIT_CODE=1
    fi

    if [ -n "$EXPECTED_FILE" ]; then
	diff -q $TMP_FILE $EXPECTED_FILE &> /dev/null
	if [ $? == 1 ]; then
	    echo FAILED running $test: wrong output
	    diff $TMP_FILE $EXPECTED_FILE
	    echo
	    exit 1
	fi
    fi

    if [[ $EXIT_CODE != $EXPECTED_EXIT_CODE ]]; then
        echo FAILED running $test: wrong exit code, got $EXIT_CODE but expected $EXPECTED_EXIT_CODE
	if [ -z $EXPECTED_FILE ]; then
	    echo Output in $TMP_FILE
	    echo
	    cat $TMP_FILE
	fi
	echo
	exit 1
    fi

    if [[ -z $EXPECTED_FILE && -s $TMP_FILE ]]; then
	echo Ignoring unexpected output from $test
	cat $TMP_FILE
	echo
    fi

    COUNT=$((COUNT + 1))
done

rm $TMP_FILE

MSG="tests passed"
if [ $COUNT == 1 ]; then
   MSG="test passed"
fi
echo "$COUNT $MSG"
