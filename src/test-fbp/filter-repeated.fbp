# This file is part of the Solettaâ„¢ Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

filter_boolean(filter-repeated/boolean)
filter_byte(filter-repeated/byte)
filter_float(filter-repeated/float)
filter_int(filter-repeated/int)
filter_rgb(filter-repeated/rgb)
filter_direction_vector(filter-repeated/direction-vector)
filter_string(filter-repeated/string)

gen_boolean(test/boolean-generator:sequence="TTFFFTT")
validator_boolean(test/boolean-validator:sequence="TFT")
gen_boolean OUT -> IN filter_boolean OUT -> IN validator_boolean
validator_boolean OUT -> RESULT filter_repeated_boolean(test/result)

gen_byte(test/int-generator:sequence="0 1 19 19 1 1 1 2")
validator_byte(test/int-validator:sequence="0 1 19 1 2")
gen_byte OUT -> IN _(converter/int-to-byte) OUT -> IN filter_byte
filter_byte OUT -> IN _(converter/byte-to-int) OUT -> IN validator_byte
validator_byte OUT -> RESULT filter_repeated_byte(test/result)

gen_float(test/float-generator:sequence="0 1 -8.0 -8.0 1.2 1.2 1.21 2")
validator_float(test/float-validator:sequence="0 1 -8.0 1.2 1.21 2")
gen_float OUT -> IN filter_float OUT -> IN validator_float
validator_float OUT -> RESULT filter_repeated_float(test/result)

gen_int(test/int-generator:sequence="0 1 -8 -8 1 1 2")
validator_int(test/int-validator:sequence="0 1 -8 1 2")
gen_int OUT -> IN filter_int OUT -> IN validator_int
validator_int OUT -> RESULT filter_repeated_int(test/result)

rgb1(constant/rgb:value=red:255|green:10|blue:100)
rgb2(constant/rgb:value=240|10|100)
rgb3(constant/rgb:value=240|10|100)
rgb4(constant/rgb:value=240|100|100)
rgb5(constant/rgb:value=240|100|100)
rgb_int(converter/rgb-to-int)
validator_green(test/int-validator:sequence="10 10 100")
rgb1 OUT -> IN filter_rgb OUT -> IN rgb_int GREEN -> IN validator_green
rgb2 OUT -> IN filter_rgb
rgb3 OUT -> IN filter_rgb
rgb4 OUT -> IN filter_rgb
rgb5 OUT -> IN filter_rgb
validator_green OUT -> RESULT filter_repeated_rgb(test/result)

direction_vector_1(constant/direction-vector:value=x:255|y:10|z:100)
direction_vector_2(constant/direction-vector:value=240|10|100)
direction_vector_3(constant/direction-vector:value=240|10|100)
direction_vector_4(constant/direction-vector:value=240|100|100)
direction_vector_5(constant/direction-vector:value=240|100|100)
direction_vector_int(converter/direction-vector-to-int)
validator_y(test/int-validator:sequence="10 10 100")
direction_vector_1 OUT -> IN filter_direction_vector OUT -> IN direction_vector_int Y -> IN validator_y
direction_vector_2 OUT -> IN filter_direction_vector
direction_vector_3 OUT -> IN filter_direction_vector
direction_vector_4 OUT -> IN filter_direction_vector
direction_vector_5 OUT -> IN filter_direction_vector
validator_y OUT -> RESULT filter_repeated_direction_vector(test/result)

string1(constant/string:value="Hello")
string2(constant/string:value="Hello")
string3(constant/string:value="World")
string4(constant/string:value="World")
validator_string(test/int-validator:sequence="0 1 2")
accumulator(int/accumulator)
string1 OUT -> IN filter_string OUT -> INC accumulator
string2 OUT -> IN filter_string
string3 OUT -> IN filter_string
string4 OUT -> IN filter_string
accumulator OUT -> IN validator_string
validator_string OUT -> RESULT filter_repeated_string(test/result)
