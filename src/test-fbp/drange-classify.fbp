# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

## TEST-SKIP-COMPILE Generator failing to properly generate code

dbl_min(constant/float:value=2.2250738585072014e-308)
two(constant/float:value=2)
zero(constant/float:value=0)
infinite(constant/float:value=Inf)
nan(constant/float:value=NaN)

dbl_min OUT -> DIVIDEND div(float/division)
two OUT -> DIVISOR div
div OUT -> IN cls_subnormal(float/classify)
cls_subnormal SUBNORMAL -> PASS r_subnormal(test/result)

zero OUT -> IN cls_zero(float/classify)
cls_zero ZERO -> PASS r_zero(test/result)

infinite OUT -> IN cls_infinite(float/classify)
cls_infinite INFINITE -> PASS r_infinite(test/result)

nan OUT -> IN cls_nan(float/classify)
cls_nan NAN -> PASS r_nan(test/result)

two OUT -> IN cls_normal(float/classify)
cls_normal NORMAL -> PASS r_normal(test/result)
