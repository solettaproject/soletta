# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

json_object_str(constant/string:value="{\"bla\": 3}")
json_array_str(constant/string:value="[1,2,3]")
error_json_object_str(constant/string:value="{\"invalid json\": 3")
error_json_array_str(constant/string:value="[1,2,3")

json_object_blob(converter/string-to-blob)
json_object(converter/blob-to-json-object)

json_array_blob(converter/string-to-blob)
json_array(converter/blob-to-json-array)

validator_json_object(test/blob-validator:expected="{\"bla\": 3}", expect_terminating_null_byte=true)
validator_json_array(test/blob-validator:expected="[1,2,3]", expect_terminating_null_byte=true)

json_object_str OUT -> IN json_object_blob OUT -> IN json_object
json_object OUT -> IN _(converter/json-object-to-blob) OUT -> IN validator_json_object
validator_json_object OUT -> RESULT json_object_test(test/result)
error_json_object_str OUT -> IN _(converter/string-to-blob) OUT -> IN _(converter/blob-to-json-object) ERROR -> IN _(converter/empty-to-boolean) OUT -> PASS invalid_json_object_test(test/result)

json_array_str OUT -> IN json_array_blob OUT -> IN json_array
json_array OUT -> IN _(converter/json-array-to-blob) OUT -> IN validator_json_array
validator_json_array OUT -> RESULT json_array_test(test/result)
error_json_array_str OUT -> IN _(converter/string-to-blob) OUT -> IN _(converter/blob-to-json-array) ERROR -> IN _(converter/empty-to-boolean) OUT -> PASS invalid_json_array_test(test/result)

json_object_blob OUT -> IN _(converter/blob-to-json-array) ERROR -> IN _(converter/empty-to-boolean) OUT -> PASS invalid_json_array_test2(test/result)

json_array_blob OUT -> IN _(converter/blob-to-json-object) ERROR -> IN _(converter/empty-to-boolean) OUT -> PASS invalid_json_object_test2(test/result)
