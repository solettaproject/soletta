# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

augend(constant/int:value=7)
addend(constant/int:value=3)
sum(constant/int:value=10)

augend OUT -> OPERAND[0] add(int/addition)
addend OUT -> OPERAND[1] add
add OUT -> IN[0] equal_sum(int/equal)
sum OUT -> IN[1] equal_sum
equal_sum OUT -> RESULT r_sum(test/result)

minuend(constant/int:value=12)
subtrahend(constant/int:value=10)
difference(constant/int:value=2)

minuend OUT -> MINUEND sub(int/subtraction)
subtrahend OUT -> SUBTRAHEND sub
sub OUT -> IN[0] equal_sub(int/equal)
difference OUT -> IN[1] equal_sub
equal_sub OUT -> RESULT r_sub(test/result)

multiplicand(test/int-generator:sequence="0 1 2",interval=20)
multiplier(test/int-generator:sequence="0 1 2 -1",interval=20)
product(test/int-validator:sequence="0 0 1 2 4 -2")

multiplicand OUT -> OPERAND[0] mul(int/multiplication)
multiplier OUT -> OPERAND[1] mul
mul OUT -> IN product OUT -> RESULT r_mul(test/result)

dividend(constant/int:value=12)
divisor(constant/int:value=3)
dividend2(constant/int:value=INT32_MIN)
divisor2(constant/int:value=-1)
quotient(test/int-validator:sequence="4 -715827882")
remainder(constant/int:value=0)

dividend OUT -> DIVIDEND div(int/division)
dividend2 OUT -> DIVIDEND div
divisor OUT -> DIVISOR div
divisor2 OUT -> DIVISOR div
div OUT -> IN quotient OUT -> RESULT r_div(test/result)

dividend OUT -> DIVIDEND mod(int/modulo)
divisor OUT -> DIVISOR mod
mod OUT -> IN[0] equal_mod(int/equal)
remainder OUT -> IN[1] equal_mod
equal_mod OUT -> RESULT r_mod(test/result)
