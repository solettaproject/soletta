{
  "$schema": "http://solettaproject.github.io/soletta/schemas/node-type-genspec.schema",
  "name": "form",
  "meta": {
    "author": "Intel Corporation",
    "license": "Apache-2.0",
    "version": "1"
  },
  "types": [
    {
      "category": "io/sw",
      "description": "Receives packages defining a strings listing and the actual string selection to then output the selection's contents. It will also output the listing itself formatted to fit in character displays. All strings in this node should be ASCII only, as it is meant to output to LCD displays.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "Defines the sequency of items to be selected by the user. Each incoming packet is added to an internal list. Use the CLEAR port to start over. The strings here will fill in the '{value}' field of the format option (e. g. '{title}{value} px'), when sent to STRING output port. Any line breaking characters in the input strings for this port will be translated to a space instead.",
          "methods": {
            "process": "add_item"
          },
          "name": "ADD_ITEM"
        },
        {
          "data_type": "string",
          "description": "Change the current selection to the item in question (useful for initial setups on a flow).",
          "methods": {
            "process": "selector_selected_set"
          },
          "name": "SELECTED"
        },
        {
          "data_type": "any",
          "description": "Clear the selector's internal state, removing all items.",
          "methods": {
            "process": "clear_set"
          },
          "name": "CLEAR"
        },
        {
          "data_type": "any",
          "description": "Change selection to the next one in the sequence",
          "methods": {
            "process": "next_set"
          },
          "name": "NEXT"
        },
        {
          "data_type": "any",
          "description": "Change selection to the previous one in the sequence",
          "methods": {
            "process": "previous_set"
          },
          "name": "PREVIOUS"
        },
        {
          "data_type": "any",
          "description": "Confirm the selection to be current one, generating output packets on both STRING and SELECTED output ports.",
          "methods": {
            "process": "selector_select_set"
          },
          "name": "SELECT"
        },
        {
          "data_type": "boolean",
          "description": "Make the interaction possible, otherwise don't produce strings or process NEXT/PREVIOUS/SELECT inputs. In other words, enable/disable the node at run-time. The node starts in the enabled state. Note that this does not affect the use of the ADD_ITEM/CLEAR/SELECTED ports.",
          "methods": {
            "process": "selector_enabled_set"
          },
          "name": "ENABLED"
        }
      ],
      "methods": {
        "close": "selector_close",
        "open": "selector_open"
      },
      "name": "form/selector",
      "options": {
        "members": [
          {
            "data_type": "int",
            "description": "The number of available columns to lay out the output string with. It must be a positive integer.",
            "name": "columns"
          },
          {
            "data_type": "int",
            "description": "The number of available rows to lay out the output string with. It must be a positive integer.",
            "name": "rows"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The title string, to be available for referencing when evaluating the format one by means of the '{title}' tag. Any line breaking characters in this string will be translated to a space instead. If no title is provided, a '{title}' tag in the format will be ignored.",
            "name": "title"
          },
          {
            "data_type": "string",
            "default": "* ",
            "description": "If set, selected items will be laid out with this string pre-fixed.",
            "name": "selection_marker"
          },
          {
            "data_type": "string",
            "default": "> ",
            "description": "If set, items under the cursor will be laid out with this string pre-fixed.",
            "name": "cursor_marker"
          },
          {
            "data_type": "string",
            "default": "{value}",
            "description": "The format string to produce the final STRING output with. The syntax is a free-form string with one '{value}' sub-string in it (and one optional '{title}' one). The value tag will be replaced by the actual string items that came in the ITEMS port, while the title one will be replaced by the title string option, if set. The title tag must occur before the value one.",
            "name": "format"
          },
          {
            "data_type": "boolean",
            "default": false,
            "description": "If true, this makes a circular menu, where after the last option it goes back to the first (and vice-versa).",
            "name": "circular"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The formatted list of entries output. This is meant to feed real display nodes (like grove/lcd-string).",
          "name": "STRING"
        },
        {
          "data_type": "string",
          "description": "The selected item.",
          "name": "SELECTED"
        }
      ],
      "private_data_type": "selector_data",
      "url": "http://solettaproject.org/doc/latest/node_types/form/selector.html"
    },
    {
      "category": "io/sw",
      "description": "Receives packages to control a boolean state. One of the input ports will commit to a state when trigerred, and the boolean value will be outputted. A string output with the current state, defined by a format string, is also outputted. All strings in this node should be ASCII only, as it is meant to output to LCD displays.",
      "in_ports": [
        {
          "data_type": "boolean",
          "description": "Change the current state (useful for initial setups on a flow).",
          "methods": {
            "process": "boolean_selected_set"
          },
          "name": "SELECTED"
        },
        {
          "data_type": "any",
          "description": "Toggle the internal state.",
          "methods": {
            "process": "toggle_set"
          },
          "name": "TOGGLE"
        },
        {
          "data_type": "any",
          "description": "Confirm the selection to be current one, generating output packets on both STRING and SELECTED output ports.",
          "methods": {
            "process": "boolean_select_set"
          },
          "name": "SELECT"
        },
        {
          "data_type": "boolean",
          "description": "Make the interaction possible, otherwise don't produce strings or process TOGGLE/SELECT inputs. In other words, enable/disable the node at run-time. The node starts in the enabled state. Note that this does not affect the use of the SELECTED port.",
          "methods": {
            "process": "boolean_enabled_set"
          },
          "name": "ENABLED"
        }
      ],
      "methods": {
        "close": "boolean_close",
        "open": "boolean_open"
      },
      "name": "form/boolean",
      "options": {
        "members": [
          {
            "data_type": "int",
            "description": "The number of available columns to lay out the output string with. It must be a positive integer.",
            "name": "columns"
          },
          {
            "data_type": "int",
            "description": "The number of available rows to lay out the output string with. It must be a positive integer.",
            "name": "rows"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The title string, to be available for referencing when evaluating the format one by means of the '{title}' tag. Any line breaking characters in this string will be translated to a space instead. If no title is provided, a '{title}' tag in the format will be ignored.",
            "name": "title"
          },
          {
            "data_type": "string",
            "default": "{value}",
            "description": "The format string to produce the final STRING output with. The syntax is a free-form string with one '{value}' sub-string in it (and one optional '{title}' one). The value tag will be replaced by the actual true/false strings defined for the node (true_str/false_str options), while the title one will be replaced by the title string option, if set. The title tag must occur before the value one.",
            "name": "format"
          },
          {
            "data_type": "string",
            "default": "true",
            "description": "The string to show for the 'true' boolean item.",
            "name": "true_str"
          },
          {
            "data_type": "string",
            "default": "false",
            "description": "The string to show for the 'false' boolean item.",
            "name": "false_str"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The formatted boolean state output. This is meant to feed real display nodes (like grove/lcd-string).",
          "name": "STRING"
        },
        {
          "data_type": "boolean",
          "description": "The current boolean state.",
          "name": "SELECTED"
        }
      ],
      "private_data_type": "boolean_data",
      "url": "http://solettaproject.org/doc/latest/node_types/form/boolean.html"
    },
    {
      "category": "io/sw",
      "description": "Receives packages to control an integer state. Two ports increment/decrement the saved integer state, while another one commits to the state when trigerred (and the integer value is outputted). A string output with the current state, defined by a format string, is also outputted. All strings in this node should be ASCII only, as it is meant to output to LCD displays.",
      "in_ports": [
        {
          "data_type": "int",
          "description": "Change the current state (useful for initial setups on a flow).",
          "methods": {
            "process": "integer_selected_set"
          },
          "name": "SELECTED"
        },
        {
          "data_type": "any",
          "description": "Increase the internal integer state.",
          "methods": {
            "process": "integer_up_set"
          },
          "name": "UP"
        },
        {
          "data_type": "any",
          "description": "Decrease the internal integer state.",
          "methods": {
            "process": "integer_down_set"
          },
          "name": "DOWN"
        },
        {
          "data_type": "any",
          "description": "Confirm the selection to be current one, generating output packets on both STRING and SELECTED output ports.",
          "methods": {
            "process": "integer_select_set"
          },
          "name": "SELECT"
        },
        {
          "data_type": "boolean",
          "description": "Make the interaction possible, otherwise don't produce strings or process UP/DOWN/SELECT inputs. In other words, enable/disable the node at run-time. The node starts in the enabled state. Note that this does not affect the use of the SELECTED port.",
          "methods": {
            "process": "integer_enabled_set"
          },
          "name": "ENABLED"
        }
      ],
      "methods": {
        "close": "integer_close",
        "open": "integer_open"
      },
      "name": "form/int",
      "options": {
        "members": [
          {
            "data_type": "int",
            "description": "The number of available columns to lay out the output string with. It must be a positive integer.",
            "name": "columns"
          },
          {
            "data_type": "int",
            "description": "The number of available rows to lay out the output string with. It must be a positive integer.",
            "name": "rows"
          },
          {
            "data_type": "irange-spec",
            "default": {
              "max": "INT32_MAX",
              "min": 0,
              "step": 1
            },
            "description": "The integer range that the node may store.",
            "name": "range"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "The initial value (must be inside the range given on the 'range' option) to start at. It may be overriden by a value in the SELECTED input port. Always remember to set it explicitly if custom values are also passed to the 'range' option.",
            "name": "start_value"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The title string, to be available for referencing when evaluating the format one by means of the '{title}' tag. Any line breaking characters in this string will be translated to a space instead. If no title is provided, a '{title}' tag in the format will be ignored.",
            "name": "title"
          },
          {
            "data_type": "string",
            "default": "{value}",
            "description": "The format string to produce the final STRING output with. The syntax is a free-form string with one '{value}' sub-string in it (and one optional '{title}' one). The value tag will be replaced by the actual true/false strings defined for the node (true_str/false_str options), while the title one will be replaced by the title string option, if set. The title tag must occur before the value one.",
            "name": "format"
          },
          {
            "data_type": "boolean",
            "default": true,
            "description": "Whether the integer selection by the UP/DOWN ports is circular or not.",
            "name": "circular"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The formatted integer state output. This is meant to feed real display nodes (like grove/lcd-string).",
          "name": "STRING"
        },
        {
          "data_type": "int",
          "description": "The current integer state.",
          "name": "SELECTED"
        },
        {
          "data_type": "boolean",
          "description": "Whether a given increment/decrement operation, at a given cursor position, leads to out-of-range situations. This can be used to warn users better of that fact.",
          "name": "OUT_OF_RANGE"
        }
      ],
      "private_data_type": "integer_data",
      "url": "http://solettaproject.org/doc/latest/node_types/form/int.html"
    },
    {
      "category": "io/sw",
      "description": "Receives packages to control an integer state. Four input ports control the position in the digits (and the digits themselves) of a forming integer number. One of the input ports will commit to a state when trigerred, and the integer value will be outputted. A string output with the current state, defined by a format string, is also outputted (one time per second, to emulate a blinking cursor). All strings in this node should be ASCII only, as it is meant to output to LCD displays.",
      "in_ports": [
        {
          "data_type": "int",
          "description": "Change the current state (useful for initial setups on a flow).",
          "methods": {
            "process": "integer_custom_selected_set"
          },
          "name": "SELECTED"
        },
        {
          "data_type": "any",
          "description": "Increase the digit under the cursor position. If the current value is -1 or -9, then this is a shortcut to moving to non-negative numbers state and go directly to 0.",
          "methods": {
            "process": "integer_custom_up_set"
          },
          "name": "UP"
        },
        {
          "data_type": "any",
          "description": "Decrease the digit under the cursor position. If the current value is 0 or -1, then this is a shortcut to moving to negative/non-negative numbers states, respectively.",
          "methods": {
            "process": "integer_custom_down_set"
          },
          "name": "DOWN"
        },
        {
          "data_type": "any",
          "description": "Advance the cursor position (to the right).",
          "methods": {
            "process": "integer_custom_next_set"
          },
          "name": "NEXT"
        },
        {
          "data_type": "any",
          "description": "Retract the cursor position (to the left).",
          "methods": {
            "process": "integer_custom_previous_set"
          },
          "name": "PREVIOUS"
        },
        {
          "data_type": "any",
          "description": "Toggle the current integer number (state) sign.",
          "methods": {
            "process": "sign_toggle"
          },
          "name": "TOGGLE_SIGN"
        },
        {
          "data_type": "any",
          "description": "Confirm the selection to be current one, generating output packets on both STRING and SELECTED output ports.",
          "methods": {
            "process": "integer_custom_select_set"
          },
          "name": "SELECT"
        },
        {
          "data_type": "boolean",
          "description": "Make the interaction possible, otherwise don't produce strings or process UP/DOWN/SELECT inputs. In other words, enable/disable the node at run-time. The node starts in the enabled state. Note that this does not affect the use of the SELECTED port.",
          "methods": {
            "process": "integer_custom_enabled_set"
          },
          "name": "ENABLED"
        }
      ],
      "methods": {
        "close": "integer_custom_close",
        "open": "integer_custom_open"
      },
      "name": "form/int-custom",
      "options": {
        "members": [
          {
            "data_type": "int",
            "description": "The number of available columns to lay out the output string with. It must be a positive integer.",
            "name": "columns"
          },
          {
            "data_type": "int",
            "description": "The number of available rows to lay out the output string with. It must be a positive integer.",
            "name": "rows"
          },
          {
            "data_type": "irange-spec",
            "default": {
              "max": "INT32_MAX",
              "min": 0,
              "step": 1
            },
            "description": "The integer range that the node may store. The step for this node is always per integer digit, so only the value of one makes sense and any other will be ignored.",
            "name": "range"
          },
          {
            "data_type": "int",
            "default": 1000,
            "description": "Cursor blinking time, in miliseconds.",
            "name": "blink_time"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "The initial value (must be inside the range given on the 'range' option) to start at. It may be overriden by a value in the SELECTED input port. Always remember to set it explicitly if custom values are also passed to the 'range' option.",
            "name": "start_value"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The title string, to be available for referencing when evaluating the format one by means of the '{title}' tag. Any line breaking characters in this string will be translated to a space instead. If no title is provided, a '{title}' tag in the format will be ignored.",
            "name": "title"
          },
          {
            "data_type": "string",
            "default": "{value}",
            "description": "The format string to produce the final STRING output with. The syntax is a free-form string with one '{value}' sub-string in it (and one optional '{title}' one). The value tag will be replaced by the actual true/false strings defined for the node (true_str/false_str options), while the title one will be replaced by the title string option, if set. The title tag must occur before the value one.",
            "name": "format"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The formatted integer state output. This is meant to feed real display nodes (like grove/lcd-string).",
          "name": "STRING"
        },
        {
          "data_type": "int",
          "description": "The current integer state.",
          "name": "SELECTED"
        },
        {
          "data_type": "empty",
          "description": "Outputs packets every time an overflow/underflow would happen on a digit flip operation (UP/DOWN ports).",
          "name": "OUT_OF_RANGE"
        }
      ],
      "private_data_type": "integer_custom_data",
      "url": "http://solettaproject.org/doc/latest/node_types/form/int-custom.html"
    },
    {
      "category": "io/sw",
      "description": "Receives packages to control the formation/edition of a string. Four input ports control the position on the characters (and the characters themselves) of a forming string. There is one dedicated port for deleting the character under the cursor. If no starting string value is given, or if all characters are deleted, the node will go into a state where no character is present, and either UP or DOWN ports have to be exercized to have at least one character again. One of the input ports will commit to a state when trigerred, and the string will be outputted. A (broader) string output with the current state, defined by a format string, is also outputted (one time per second, to emulate a blinking cursor). All strings in this node should be ASCII only, as it is meant to output to LCD displays.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "Change the current state (useful for initial setups on a flow).",
          "methods": {
            "process": "string_selected_set"
          },
          "name": "SELECTED"
        },
        {
          "data_type": "any",
          "description": "Increase the character under the cursor position. The order of the characters list is given by the 'charset' option.",
          "methods": {
            "process": "string_up_set"
          },
          "name": "UP"
        },
        {
          "data_type": "any",
          "description": "Decrease the character under the cursor position.  The order of the characters list is given by the 'charset' option.",
          "methods": {
            "process": "string_down_set"
          },
          "name": "DOWN"
        },
        {
          "data_type": "any",
          "description": "Advance the cursor position (to the right). If the last character was under the cursor, this action grows the string by one character.",
          "methods": {
            "process": "string_next_set"
          },
          "name": "NEXT"
        },
        {
          "data_type": "any",
          "description": "Retract the cursor position (to the left).",
          "methods": {
            "process": "string_previous_set"
          },
          "name": "PREVIOUS"
        },
        {
          "data_type": "any",
          "description": "Delete the current char, retracting the cursor (to the left).",
          "methods": {
            "process": "string_delete"
          },
          "name": "DELETE"
        },
        {
          "data_type": "any",
          "description": "Confirm the selection to be current one, generating output packets on both STRING and SELECTED output ports.",
          "methods": {
            "process": "string_select_set"
          },
          "name": "SELECT"
        },
        {
          "data_type": "boolean",
          "description": "Make the interaction possible, otherwise don't produce strings or process UP/DOWN/SELECT inputs. In other words, enable/disable the node at run-time. The node starts in the enabled state. Note that this does not affect the use of the SELECTED port.",
          "methods": {
            "process": "string_enabled_set"
          },
          "name": "ENABLED"
        }
      ],
      "methods": {
        "close": "string_close",
        "open": "string_open"
      },
      "name": "form/string",
      "options": {
        "members": [
          {
            "data_type": "int",
            "description": "The number of available columns to lay out the output string with. It must be a positive integer.",
            "name": "columns"
          },
          {
            "data_type": "int",
            "description": "The number of available rows to lay out the output string with. It must be a positive integer.",
            "name": "rows"
          },
          {
            "data_type": "int",
            "default": 1000,
            "description": "Cursor blinking time, in miliseconds.",
            "name": "blink_time"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "Minimum output string length (must be non-negative and less than or equal to 'max_length' option's value).",
            "name": "min_length"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "Maximum output string length (must be non-negative and greater than or equal to 'min_length' option's value). The special value of 0 means no maximum will be applied.",
            "name": "max_length"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The initial string value (all characters must be inside the 'charset' option's set of chars) to start at. It may be overriden by a value in the SELECTED input port.",
            "name": "start_value"
          },
          {
            "data_type": "string",
            "default": " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!?.:;,-()[]{}|\\\\^~`_\"'#$%&*+/<>=@",
            "description": "The character set to build the strings with in this node. The order is important: this is the sequence the UP/DOWN ports will cycle through.",
            "name": "charset"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "The title string, to be available for referencing when evaluating the format one by means of the '{title}' tag. Any line breaking characters in this string will be translated to a space instead. If no title is provided, a '{title}' tag in the format will be ignored.",
            "name": "title"
          },
          {
            "data_type": "string",
            "default": "{value}",
            "description": "The format string to produce the final STRING output with. The syntax is a free-form string with one '{value}' sub-string in it (and one optional '{title}' one). The value tag will be replaced by the actual true/false strings defined for the node (true_str/false_str options), while the title one will be replaced by the title string option, if set. The title tag must occur before the value one.",
            "name": "format"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The formatted string output. This is meant to feed real display nodes (like grove/lcd-string).",
          "name": "STRING"
        },
        {
          "data_type": "string",
          "description": "The current string state.",
          "name": "SELECTED"
        }
      ],
      "private_data_type": "string_data",
      "url": "http://solettaproject.org/doc/latest/node_types/form/string.html"
    }
  ]
}
