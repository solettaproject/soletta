{
  "$schema": "http://solettaproject.github.io/soletta/schemas/node-type-genspec.schema",
  "name": "string",
  "meta": {
    "author": "Intel Corporation",
    "license": "BSD-3-Clause",
    "version": "1"
  },
  "types": [
    {
      "category": "string",
      "description": "Compare two strings",
      "in_ports": [
        {
          "data_type": "string",
          "description": "Two strings to be compared. Indexed from 0 to 1.",
          "methods": {
            "process": "string_compare"
          },
          "name": "IN[2]"
        }
      ],
      "methods": {
        "close": "string_close",
        "open": "string_compare_open"
      },
      "name": "string/compare",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "Amount of bytes to be compared between strings. If zero, the whole strings will be compared.",
            "name": "bytes"
          },
          {
            "data_type": "boolean",
            "default": false,
            "description": "Ignore case when comparing strings.",
            "name": "ignore_case"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "int",
          "description": "It returns an integer less than, equal to, or greater than zero if string received on IN[0] is found to be less than, to match, or be greater than string on IN[1].",
          "name": "OUT"
        },
        {
          "data_type": "boolean",
          "description": "TRUE if the string received on IN[0] is the same as the string on IN[1].",
          "name": "EQUAL"
        }
      ],
      "private_data_type": "string_compare_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/compare.html"
    },
    {
      "category": "string",
      "description": "Concatenate two strings",
      "in_ports": [
        {
          "data_type": "string",
          "description": "Two strings to be concatenated. Indexed from 0 to 1.",
          "methods": {
            "process": "string_concat"
          },
          "name": "IN[2]"
        }
      ],
      "methods": {
        "close": "string_concatenate_close",
        "open": "string_concatenate_open"
      },
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "Amount of bytes to be copied from string received on IN[1]. If zero, the whole string will be concatenated to the string received on IN[0]",
            "name": "bytes"
          },
          {
            "data_type": "string",
            "default": null,
            "description": "Separator string to be used between the two concatenated strings. It's set to null by default (no separator).",
            "name": "separator"
          }
        ],
        "version": 1
      },
      "name": "string/concatenate",
      "out_ports": [
        {
          "data_type": "string",
          "description": "String IN[0] concatenated to string IN[1].",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_concatenate_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/concatenate.html"
    },
    {
      "category": "string",
      "description": "Calculate the length of a string",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be measured.",
          "methods": {
            "process": "string_length_process"
          },
          "name": "IN"
        }
      ],
      "methods": {
        "open": "string_length_open"
      },
      "name": "string/length",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "Maximum length to be checked. If a string is greater than that, maxlen value will be sent. If zero, no limit is applied.",
            "name": "maxlen"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "int",
          "description": "Send the string size, the number of bytes excluding terminating null byte. If maxlen is provided, it'll be at most this value.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_length_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/length.html"
    },
    {
      "category": "string",
      "description": "Extract a slice from a given string",
      "in_ports": [
        {
          "data_type": "int",
          "description": "Start index of the slice (counting starts from 0). Negative values are relative to the end of the input string. If the given indexes are not valid for the input string, an empty string output is produced.",
          "methods": {
            "process": "string_slice"
          },
          "name": "START"
        },
        {
          "data_type": "int",
          "description": "End index of the slice (counting starts from 0). Negative values are relative to the end of the input string. If the given indexes are not valid for the input string, an empty string output is produced.",
          "methods": {
            "process": "string_slice"
          },
          "name": "END"
        },
        {
          "data_type": "string",
          "description": "Input string to be sliced.",
          "methods": {
            "process": "string_slice_input"
          },
          "name": "IN"
        }
      ],
      "methods": {
        "close": "string_slice_close",
        "open": "string_slice_open"
      },
      "name": "string/slice",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "Start index of the slice (counting starts from 0). Negative values are relative to the end of the input string. If the given indexes are not valid for the input string, an empty string output is produced. It can be overriden by values received on 'START' port.",
            "name": "start"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "End index of the slice (counting starts from 0). Negative values are relative to the end of the input string. If the given indexes are not valid for the input string, an empty string output is produced. It can be overriden by values received on 'END' port.",
            "name": "end"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "String slice given by the indexes in the IDX port array.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_slice_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/slice.html"
    },
    {
      "category": "string",
      "description": "Split a string given a separator.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be split.",
          "methods": {
            "process": "string_split"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "String received on 'IN' port will be split using these delimiter chars.",
          "methods": {
            "process": "set_string_separator"
          },
          "name": "SEPARATOR"
        },
        {
          "data_type": "int",
          "description": "A string can be split in many substrings. This value defines which substring should be sent. It must be non-negative.",
          "methods": {
            "process": "set_string_index"
          },
          "name": "INDEX"
        },
        {
          "data_type": "int",
          "description": "A string can be split in many substrings. This value defines the maximum number of splits (separated by the separator option) to generate, and must be non-negative.",
          "methods": {
            "process": "set_max_split"
          },
          "name": "MAX_SPLIT"
        }
      ],
      "methods": {
        "close": "string_split_close",
        "open": "string_split_open"
      },
      "name": "string/split",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "A string can be split in many substrings. This value defines which substring should be sent. It must be non-negative. It can be overriden by values received on 'INDEX' port.",
            "name": "index"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "A string can be split in many substrings. This value defines the maximum number of splits (separated by the separator option) to generate, and must be non-negative. The default value of zero means to generate all substrings between the given separator. This option can be overriden by values received on the 'MAX_SPLIT' port.",
            "name": "max_split"
          },
          {
            "data_type": "string",
            "default": " ",
            "description": "String received on 'IN' port will be split using these delimiters chars. It can be overriden by values received on 'SEPARATOR' port.",
            "name": "separator"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "int",
          "description": "Number of generated substrings.",
          "name": "LENGTH"
        },
        {
          "data_type": "string",
          "description": "Substring given a separator and an index.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_split_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/split.html"
    },
    {
      "category": "string",
      "description": "Given an input string, output a copy with all original characters in lower case.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be output in lowercase",
          "methods": {
            "process": "string_lowercase"
          },
          "name": "IN"
        }
      ],
      "name": "string/lowercase",
      "out_ports": [
        {
          "data_type": "string",
          "description": "The original input string now in lowercase characters",
          "name": "OUT"
        }
      ],
      "url": "http://solettaproject.org/doc/latest/node_types/string/lowercase.html"
    },
    {
      "category": "string",
      "description": "Given an input string, output a copy with all original characters in upper case.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be output in uppercase",
          "methods": {
            "process": "string_uppercase"
          },
          "name": "IN"
        }
      ],
      "name": "string/uppercase",
      "out_ports": [
        {
          "data_type": "string",
          "description": "The original input string now in uppercase characters",
          "name": "OUT"
        }
      ],
      "url": "http://solettaproject.org/doc/latest/node_types/string/uppercase.html"
    },
    {
      "category": "string",
      "description": "Output a boolean packet indicating whether a given input string starts with a given prefix or not.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to have a prefix searched for.",
          "methods": {
            "process": "string_prefix_suffix_process"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "Prefix string to be searched on the one received on the 'IN' port.",
          "methods": {
            "process": "set_prefix_suffix_sub_str"
          },
          "name": "PREFIX"
        },
        {
          "data_type": "int",
          "description": "Index, on the string received on the 'IN' port, where to start the prefix matching. It must be non-negative. Make sure to use a valid index for the input string.",
          "methods": {
            "process": "set_prefix_suffix_start"
          },
          "name": "START"
        },
        {
          "data_type": "int",
          "description": "Index, on the string received on the 'IN' port, where to end the prefix matching. Any negative value means it's not set, i.e. do the matching until the end of the input string. It must not be less than the value set on the 'START' port.",
          "methods": {
            "process": "set_prefix_suffix_end"
          },
          "name": "END"
        }
      ],
      "methods": {
        "close": "string_prefix_suffix_close",
        "open": "string_starts_with_open"
      },
      "name": "string/starts-with",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "Index where to start the prefix matching. Any negative value means it's not set, i.e. start the matching from the input's start. It must not be greater than the value set for the end index (if that one is non-negative). This value may be overriden by the string received on the 'START' port.",
            "name": "start"
          },
          {
            "data_type": "int",
            "default": -1,
            "description": "Index where to end the prefix matching. Any negative value means it's not set, i.e. do the matching until the end of the input string. It must not be less than the value set for the start index. This value may be overriden by the string received on the 'END' port.",
            "name": "end"
          },
          {
            "data_type": "string",
            "description": "Prefix string to be searched on the one received on the 'IN' port. It can be overriden by values received on 'PREFIX' port.",
            "name": "prefix"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "boolean",
          "description": "Whether the input string has the indicated prefix or not.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_prefix_suffix_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/starts_with.html"
    },
    {
      "category": "string",
      "description": "Output a boolean packet indicating whether a given input string ends with a given suffix or not.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to have a suffix searched for.",
          "methods": {
            "process": "string_prefix_suffix_process"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "Suffix string to be searched on the one received on the 'IN' port.",
          "methods": {
            "process": "set_prefix_suffix_sub_str"
          },
          "name": "SUFFIX"
        },
        {
          "data_type": "int",
          "description": "Index where to start the suffix matching. Any negative value means it's not set, i.e. start the matching from the input's end minus the size of the suffix. It must not be greater than the value set on the 'END' port (if that one is non-negative).",
          "methods": {
            "process": "set_prefix_suffix_start"
          },
          "name": "START"
        },
        {
          "data_type": "int",
          "description": "Index, on the string received on the 'IN' port, where to end the suffix matching. Any negative value means it's not set, i.e. do the matching until the end of the input string. It must not be less than the value set on the 'START' port (if that one is non-negative).",
          "methods": {
            "process": "set_prefix_suffix_end"
          },
          "name": "END"
        }
      ],
      "methods": {
        "close": "string_prefix_suffix_close",
        "open": "string_ends_with_open"
      },
      "name": "string/ends-with",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": -1,
            "description": "Index where to start the suffix matching. Any negative value means it's not set, i.e. start the matching from the input's end minus the size of the suffix. It must not be greater than the value set for the end index (if that one is non-negative). This value may be overriden by the string received on the 'START' port.",
            "name": "start"
          },
          {
            "data_type": "int",
            "default": -1,
            "description": "Index where to end the suffix matching. Any negative value means it's not set, i.e. end the matching at the input's string end. It must not be less than the value set for the start index (if that one is non-negative). This value may be overriden by the string received on the 'END' port.",
            "name": "end"
          },
          {
            "data_type": "string",
            "description": "Suffix string to be searched on the one received on the 'IN' port. It can be overriden by values received on 'SUFFIX' port.",
            "name": "suffix"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "boolean",
          "description": "Whether the input string has the indicated suffix or not.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_prefix_suffix_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/ends_with.html"
    },
    {
      "category": "string",
      "description": "Replace a pattern in a string for another.",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be replaced.",
          "methods": {
            "process": "string_replace_process"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "The string received on the 'IN' port will have substrings defined by this port replaced by the ones defined in the 'TO' port.",
          "methods": {
            "process": "set_replace_from"
          },
          "name": "FROM"
        },
        {
          "data_type": "string",
          "description": "The string received on the 'IN' port will have substrings defined by the 'FROM' port replaced by the ones defined in this port.",
          "methods": {
            "process": "set_replace_to"
          },
          "name": "TO"
        },
        {
          "data_type": "int",
          "description": "A string can have a substring replaced in many points. This value defines the maximum number of replacements to attempt, and must be non-negative.",
          "methods": {
            "process": "set_max_replace"
          },
          "name": "MAX_REPLACE"
        }
      ],
      "methods": {
        "close": "string_replace_close",
        "open": "string_replace_open"
      },
      "name": "string/replace",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "A string can have a substring replaced in many points. This value defines the maximum number of replacements to attempt, and must be non-negative.. The default value of zero means to replace all possible substrings. This option can be overriden by values received on the 'MAX_REPLACE' port.",
            "name": "max_replace"
          },
          {
            "data_type": "string",
            "default": "",
            "description": "The string received on the 'IN' port will have substrings defined by this option replaced by the ones defined by the 'to_string' one. It can be overriden by values received on 'FROM' port.",
            "name": "from_string"
          },
          {
            "data_type": "boolean",
            "default": true,
            "description": "Whether to only forward the input string as is to the output port when no matches occur (true) or to generate error packets (false)",
            "name": "forward_on_no_match"
          },
          {
            "data_type": "string",
            "default": "",
            "description": "The string received on the 'IN' port will have substrings defined by the 'from_string' option replaced by the ones defined by this one. It can be overriden by values received on 'TO' port.",
            "name": "to_string"
          }

        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The original string coming in the 'IN' port with the due replacements made.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_replace_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/replace.html"
    },
    {
      "category": "string",
      "description": "Search a given regular expression pattern on a given string. This node expects the same syntax and semantics as Perl 5 on regular expressions. When dealing the UTF-8 characters, remember to use the 'p{}' family of escape sequences (Unicode character properties).",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be searched.",
          "methods": {
            "process": "string_regexp_search"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "Regular expression pattern to search the string received on 'IN' port with.",
          "methods": {
            "process": "set_string_regexp_pattern"
          },
          "name": "REGEXP"
        },
        {
          "data_type": "int",
          "description": "This value defines which substring match (by index, starting from 0) inside the one that was fed to the 'IN' port should be output in the 'OUT' port. It must be non-negative. The first substring will always identify the portion of the subject string matched by the entire pattern. The next one will be the first capturing subpattern, and so on.",
          "methods": {
            "process": "set_string_regexp_index"
          },
          "name": "INDEX"
        },
        {
          "data_type": "int",
          "description": "The regular expression matching against the input string can result in various substring matches. This value defines the maximum number of them to generate and make available for selection by the 'INDEX' port. It must be non-negative.",
          "methods": {
            "process": "set_string_regexp_max_match"
          },
          "name": "MAX_REGEXP_SEARCH"
        }
      ],
      "methods": {
        "close": "string_regexp_search_close",
        "open": "string_regexp_search_open"
      },
      "name": "string/regexp-search",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "This value defines which substring match (by index, starting from 0) inside the one that was fed to the 'IN' port should be output in the 'OUT' port. It must be non-negative. It can be overriden by values received on 'INDEX' port.",
            "name": "index"
          },
          {
            "data_type": "int",
            "default": 0,
            "description": "The regular expression matching against the input string can result in various substring matches. This value defines the maximum number of them to generate and make available for selection by the 'INDEX' port. This option can be overriden by values received on the 'MAX_REGEXP_SEARCH' port. The value of zero (default one) will be interpreted as to generate all possible matches.",
            "name": "max_regexp_search"
          },
          {
            "data_type": "string",
            "description": "Regular expression pattern to search the string received on 'IN' port with. It can be overriden by values received on 'REGEXP' port.",
            "name": "regexp"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "int",
          "description": "Number of regular expression match substrings. The first substring will always identify the portion of the subject string matched by the entire pattern. The next one will be the first capturing subpattern, and so on.",
          "name": "LENGTH"
        },
        {
          "data_type": "string",
          "description": "Outputs the regular expression match substring at the selected index. With regard to indeces, the first substring (index 0) will always identify the portion of the subject string matched by the entire pattern. The next one will be the first capturing subpattern, and so on.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_regexp_search_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/regexp_search.html"
    },
    {
      "category": "string",
      "description": "Replace a regular expression pattern in a string for another. This node expects the same syntax and semantics as Perl 5 on regular expressions. When dealing the UTF-8 characters, remember to use the 'p{}' family of escape sequences (Unicode character properties).",
      "in_ports": [
        {
          "data_type": "string",
          "description": "String to be replaced.",
          "methods": {
            "process": "string_regexp_replace"
          },
          "name": "IN"
        },
        {
          "data_type": "string",
          "description": "Regular expression pattern to match the string received on 'IN' port with. If groups are used, they may be referred back on the string coming in the 'TO' port.",
          "methods": {
            "process": "set_string_regexp_replace_pattern"
          },
          "name": "REGEXP"
        },
        {
          "data_type": "string",
          "description": "String substitution for the pattern match (may be a regular expression as well). Groups present on the string provided to the port 'REGEXP' may be referred here on the substitution.",
          "methods": {
            "process": "set_string_regexp_replace_to"
          },
          "name": "TO"
        },
        {
          "data_type": "int",
          "description": "The regular expression matching against the input string can result in various substring matches. This value defines the maximum number of them to exchange for the string given in the 'TO' port. It must be non-negative.",
          "methods": {
            "process": "set_string_regexp_replace_max_match"
          },
          "name": "MAX_REGEXP_REPLACE"
        }
      ],
      "methods": {
        "close": "string_regexp_replace_close",
        "open": "string_regexp_replace_open"
      },
      "name": "string/regexp-replace",
      "options": {
        "members": [
          {
            "data_type": "int",
            "default": 0,
            "description": "The regular expression matching against the input string can result in various substring matches. This value defines the maximum number of them to replace for the string given in the 'to' option. This option can be overriden by values received on the 'MAX_REGEXP_REPLACE' port. The value of zero (default one) will be interpreted as to replace all possible matches.",
            "name": "max_regexp_replace"
          },
          {
            "data_type": "string",
            "description": "Regular expression pattern to match the string received on 'IN' port with. If groups are used, they may be referred back on the string coming in the 'TO' port. It must not be an empty string. It may be overriden by values received on 'REGEXP' port.",
            "name": "regexp"
          },
          {
            "data_type": "string",
            "description": "String substitution for the pattern match. Groups present on the string provided to the port 'REGEXP' may be referred here on the substitution (e.g. \\\\g1 or \\\\1 for the first matching group). It may be an empty string. It can be overriden by values received on 'TO' port.",
            "name": "to"
          },
          {
            "data_type": "boolean",
            "default": true,
            "description": "Whether to only forward the input string as is to the output port when no matches occur (true) or to generate error packets (false)",
            "name": "forward_on_no_match"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "The original string coming in the 'IN' port with the due replacements made.",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_regexp_replace_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/regexp_replace.html"
    },
    {
      "category": "string",
      "description": "Generate a new universally unique identifier (UUID). The output UUID is 16 bytes (128 bits) long and conforms to v4 UUIDs (generated from random—or pseudo-random—numbers). The output string packet is sent upon node creation, but new UUIDs can be generated by 'ticks' on the 'GERERATE' input port.",
      "in_ports": [
        {
          "data_type": "any",
          "description": "Generate a new UUID.",
          "methods": {
            "process": "string_uuid_gen"
          },
          "name": "GENERATE"
        }
      ],
      "methods": {
        "open": "string_uuid_open"
      },
      "name": "string/uuid",
      "options": {
        "members": [
          {
            "data_type": "boolean",
            "default": false,
            "description": "Whether to put UUID hyphens in the resulting string.",
            "name": "with_hyphens"
          },
          {
            "data_type": "boolean",
            "default": false,
            "description": "Whether to output the UUID string in uppercase",
            "name": "upcase"
          }
        ],
        "version": 1
      },
      "out_ports": [
        {
          "data_type": "string",
          "description": "A new v4 UUID string",
          "name": "OUT"
        }
      ],
      "private_data_type": "string_uuid_data",
      "url": "http://solettaproject.org/doc/latest/node_types/string/uuid.html"
    }
  ]
}
