#!/usr/bin/env python3

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import json
import argparse
import uuid

aliasesDefaultDir = '{{@FLOWALIASESDIR@}}'
aliasesArray = []

def setAliases(jsonContent):
    alias = {}
    if 'aliases' not in jsonContent:
        return
    alias['name'] = jsonContent['name']
    alias['aliases'] = jsonContent['aliases']
    aliasesArray.append(alias)

def parseJson(jsonFile):
    with open(jsonFile, 'r') as f:
        jsonContent = json.load(f)

    if 'types' not in jsonContent:
        setAliases(jsonContent)
    else:
        for t in jsonContent['types']:
            setAliases(t)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="""  Parses the node type description files and outputs a JSON with its aliases.""")


    parser.add_argument("--output-dir",
                        type=str,
                        help="""Where to save the aliases JSON file.
                        By default it's saved at '%s'.
                        This is the default location used by Soletta to find the aliases files.  """ %(aliasesDefaultDir),
                        default=aliasesDefaultDir)
    parser.add_argument("--precedence-level",
                        type=int,
                        help="""The precedence level that will be used for the generated alias file.
                        Higher values will take higher precedence. The default value is 50""",
                        default=50)
    parser.add_argument("--file-name", type=str, help="The resulting JSON file name - This name will be appended to the predecende level")
    parser.add_argument("--node-description-dir", required=True, type=str, help="Where are located the node JSON description files")

    args = parser.parse_args()

    for root, dirs, files in os.walk(args.node_description_dir):
        for jsonFile in filter(lambda x: x.endswith('.json'), files):
            parseJson(os.path.join(root, jsonFile))

    if len(aliasesArray) > 0:
        fileName = args.file_name
        if fileName is None:
            fileName = 'aliases-' + str(uuid.uuid4())
        path = os.path.join(args.output_dir, str(args.precedence_level) + '-' + fileName + '.json')
        with open(path, 'w') as f:
            json.dump(aliasesArray, f)
        print('Alias file saved at %s' %(path))
    sys.exit(0)
