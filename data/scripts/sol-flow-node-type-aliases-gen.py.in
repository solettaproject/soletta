#!/usr/bin/env python3

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import json
import argparse
import uuid

aliasesDefaultDir = '{{@FLOWALIASESDIR@}}'
aliasesDefaultFileName = '50-default.json'
aliasesArray = []

def setAliases(jsonContent):
    alias = {}
    if 'aliases' not in jsonContent:
        return
    alias['name'] = jsonContent['name']
    alias['aliases'] = jsonContent['aliases']
    aliasesArray.append(alias)

def parseJson(jsonFile):
    jsonContent = json.load(jsonFile)

    if 'types' not in jsonContent:
        setAliases(jsonContent)
    else:
        for t in jsonContent['types']:
            setAliases(t)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="""  Parses the node type description files and outputs a JSON with its aliases.""")


    parser.add_argument("--output",
                        type=str,
                        help="""Full path to output aliases JSON file.
                        By default it's saved as '%s/%s'.
                        It should be placed at the default location used by Soletta to find the aliases files.  """ %(aliasesDefaultDir, aliasesDefaultFileName),
                        default=aliasesDefaultDir + aliasesDefaultFileName)
    parser.add_argument("inputs_list", nargs='+',
                        help="List of input description files in JSON format",
                        type=argparse.FileType('r', encoding='UTF-8'))

    args = parser.parse_args()

    for file in args.inputs_list:
        parseJson(file)

    if len(aliasesArray) > 0:
        path = args.output
        if path is None:
            path = aliasesDefaultDir + aliasesDefaultFileName
        with open(path, 'w') as f:
            json.dump(aliasesArray, f, sort_keys=True)
        print('Alias file saved at %s' %(path))
    sys.exit(0)
