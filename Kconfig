mainmenu "Soletta configuration"

source "Kconfig.gen"
source "tools/build/Kconfig.features"

config BASE_OS
    string
    default "contiki" if HAVE_CONTIKI
    default "linux" if HAVE_LINUX
    default "riot" if HAVE_RIOTOS

source "tools/build/Kconfig.$BASE_OS"

menu "Basic"
# backward compatibility with autotools vars
config ENABLE_DYNAMIC_MODULES
	bool
	default n

config CC_SANITIZE
	bool "Compiler sanitize"
	depends on FEATURE_CC_SANITIZE && (HAVE_SANITIZE_UNDEFINED || HAVE_SANITIZE_ADDRESS)
	default y

choice CC_SANITIZE_TYPE
	prompt "Compiler sanitize type"
	depends on CC_SANITIZE
	default CC_SANITIZE_UNDEFINED if HAVE_SANITIZE_UNDEFINED
	default CC_SANITIZE_ADDRESS if HAVE_SANITIZE_ADDRESS

config CC_SANITIZE_UNDEFINED
	bool "undefined"
	depends on HAVE_SANITIZE_UNDEFINED

config CC_SANITIZE_ADDRESS
	bool "address"
	depends on HAVE_SANITIZE_ADDRESS
endchoice

config SHARED_LIBRARY
    bool "Build shared library"
    default y
    depends on FEATURE_DYNAMIC_LINKER

config MODULES
	bool "Enable loadable module support"
	option modules
	select ENABLE_DYNAMIC_MODULES
	depends on SHARED_LIBRARY
	default y
	help
            This option enables dynamically loadable modules to be
            created and used by Soletta. These modules can be created
            and installed post libsoletta creation and when removed
            shouldn't impact those that do not use such
            functionality.

            Modules are usually distributed as ".so" (shared objects)
            and are usually loaded by libc (libdl) function
            dlopen(). The modules are commonly installed at
            $PREFIX/lib/soletta/modules/<subsystem>/<module>.

            One would disable the modules support only when doing
            single-binary static builds, in this case all modules
            would be known at compile time, thus the code path can be
            avoided and the dependency on extra libraries (ie: -ldl
            on Linux) is not needed.

            If unsure, say Y.

config PREFIX
	string "Installation prefix"
	default "/usr"
	help
            This path is the intended installation prefix for the
            binaries. It is used by code paths that need to look for
            further resources, such as loadable module support (see
            MODULES configuration help).

endmenu

menu "Core library"
source "src/lib/common/Kconfig"
source "src/lib/datatypes/Kconfig"
source "src/lib/parsers/Kconfig"
endmenu

menu "Flow Based Programming (FBP)"
depends on FEATURE_FLOW
source "src/lib/flow/Kconfig"
endmenu

menu "Networking"
depends on FEATURE_NETWORK
source "src/lib/comms/Kconfig"
endmenu

menu "Samples"
depends on FEATURE_RUNNABLE_PROGRAMS
source "src/samples/coap/Kconfig"
source "src/samples/common/Kconfig"

config FLOW_SAMPLES
	bool "Flow samples"
	depends on FLOW_SUPPORT
	default y

config FLOW_FBP_GENERATOR_SAMPLES
	bool
	depends on FLOW_SAMPLES && FBP_GENERATOR
	default y

source "src/samples/flow/basics/Kconfig"
source "src/samples/flow/c-api/Kconfig"
source "src/samples/flow/compass/Kconfig"
source "src/samples/flow/foosball/Kconfig"
source "src/samples/flow/galileo-grove-kit/Kconfig"
source "src/samples/flow/galileo-grove-kit/lcd/Kconfig"
source "src/samples/flow/gtk-gallery/Kconfig"
source "src/samples/flow/led-strip/Kconfig"
source "src/samples/flow/misc/Kconfig"

endmenu

menu "Tools"
depends on FEATURE_RUNNABLE_PROGRAMS
source "src/bin/sol-fbp-generator/Kconfig"
source "src/bin/sol-fbp-runner/Kconfig"
source "src/bin/sol-fbp-to-dot/Kconfig"
source "src/bin/sol-flow-node-types/Kconfig"
endmenu

menu "Test suite"
depends on FEATURE_RUNNABLE_PROGRAMS
source "src/test/Kconfig"
endmenu
